<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[RESTful封装思想，Dozer使用]]></title>
    <url>%2F2019%2F09%2F26%2FRESTful%2F</url>
    <content type="text"><![CDATA[Springboot第二天，又学到了很多很有意思的东西，这边来记录一下这三个比较amaze我的。 先说RESTful学到的封装写法RESTful风格概念我这边就不多写了，因为之前学ssm的时候自己就查过详细的资料，这边上个链接，忘了再来看看 理解RESTful架构。 然后当时ssm的写法是配置了一个HiddenHttpMethodFilter过滤器， 12345678&lt;filter&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; 然后在form表单里面加上一个新的值， 这样在后台就知道你这个方法是个delete请求了。这是ssm里面的写法，挺有意思的是这个隐藏域的思想。然后现在SpringBoot就很简单了，直接用注解，@PutMapping，@GetMapping，这些就能直接匹配到Restful风格的请求。 以上是基础的，我这边着重想写的是啥呢，RESTful的返回值，不应该仅仅只有返回的数据，他还应该包括响应的状态码，结果描述信息，然后再是请求的结果。那这样的情况下，我们可以把这些封装起来，再搞个封装类。 12345678910111213141516171819202122232425262728@Datapublic class AjaxResponse &#123; private boolean isok; //请求是否处理成功 private int code; //请求响应状态码（200、400、500） private String message; //请求结果描述信息 private Object data; //请求结果数据 private AjaxResponse() &#123; &#125; public static AjaxResponse success() &#123; AjaxResponse resultBean = new AjaxResponse(); resultBean.setIsok(true); resultBean.setCode(200); resultBean.setMessage(&quot;success&quot;); return resultBean; &#125; public static AjaxResponse success(Object data) &#123; AjaxResponse resultBean = new AjaxResponse(); resultBean.setIsok(true); resultBean.setCode(200); resultBean.setMessage(&quot;success&quot;); resultBean.setData(data); return resultBean; &#125;&#125; 这种思想很有意思。其实这种思想不是第一次碰见吧，之前用pagehelper分页工具的时候，也是这个思想，把信息和分页需要的相关数据封装起来，然后向前端返回一个pageinfo的对象，再在前端解析它。 这边写这个其实意义在于，想告诉自己思路要灵活，不要死板，要熟悉各种编程思想。 Dozer的使用使用场景在此之前，我是没想过一个项目需要两个pojo类的。但是在接触了Dozer以后，你是能感觉到它存在的必要性的。因为你传到表现层的数据visual object (vo) ，多多少少应该和你查询出来的数据有所出入。 比如说你想用jackson去对返回的数据做个处理，比如说我id值不返回给前端，我用@JsonIgnore 排除id，那这样的标示放在po上是不合理的。所以这时候，我们就要区分po和vo。 dozer是什么以及使用所以我们这边介绍dozer，它是一个能把实体和实体之间进行转换的工具，只要建立好映射关系，就像是ORM的数据库和实体映射一样。写法是这样的： 1EntityVo entityVo = dozerMapper.map(entity, EntityVo.class); 接下来讲一下这玩意怎么配置到项目中的，首先老规矩添加依赖 12345&lt;dependency&gt; &lt;groupId&gt;net.sf.dozer&lt;/groupId&gt; &lt;artifactId&gt;dozer&lt;/artifactId&gt; &lt;version&gt;5.4.0&lt;/version&gt;&lt;/dependency&gt; 然后创建一个配置类 12345678@Configuration public class DozerBeanMapperConfigure &#123; @Bean public DozerBeanMapper mapper() &#123; DozerBeanMapper mapper = new DozerBeanMapper(); return mapper; &#125; &#125; 然后我们就可以直接使用了。 12@Autowiredprotected Mapper dozerMapper; 具体的场景举个例子：比如说我们想要查询编号为1的员工信息 1234567public Employeevo getEmployee(int id)&#123; //查询到了信息，这是一个po Employee employee = EmployeeMapper.selectByPrimaryId(id); //将它转为vo Employeevo employeevo = dozerMapper.map(employee,Employeevo.class); return employeevo;&#125; 那有时候我们返回的是多个对象呢，那我们就需要借助工具类： 1234567891011121314public class DozerUtils &#123; static DozerBeanMapper dozerBeanMapper = new DozerBeanMapper(); public static &lt;T&gt; List&lt;T&gt; mapList(Collection sourceList, Class&lt;T&gt; destinationClass)&#123; List destinationList = Lists.newArrayList(); for (Iterator i$ = sourceList.iterator(); i$.hasNext();)&#123; Object sourceObject = i$.next(); Object destinationObject = dozerBeanMapper.map(sourceObject, destinationClass); destinationList.add(destinationObject); &#125; return destinationList; &#125;&#125; 再来个例子，比如说我们要查询所有的员工信息： 1234567public List&lt;Employeevo&gt; getAll()&#123; //查询到了信息，这是一个po List&lt;Employee&gt; employees = EmployeeMapper.selectByExample(null); //调用工具类中的mapList方法 List&lt;Employeevo&gt; employeevos = dozerMapper.mapList(employees,Employeevo.class); return employeevos;&#125; 就是这样子的。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringBoot系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git小结]]></title>
    <url>%2F2019%2F09%2F26%2Fgit%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[最近超卖力地学SpringBoot，然后写很多demo。之前git不太熟，只知道add，commit，checkout这些，现在懂了更多，所以写一篇记录一下这些操作。 不讲那些我已经懂的，svn和git区别，什么本地仓库，工作区概念之类的了，直接开冲常用命令好吧。 git int创建一个空的本地仓库 git add这是将修改添加到暂存区有几个后缀的 git add -A 是全部添加 git add -u 将当前目录下所有跟踪文件中被修改过或已删除文件的信息添加到索引库 通常情况下，直接是-A git status检查文件状态在commit之前，用git status检查一下文件状态是个很好的习惯 git commit将更改记录(提交)到存储库通常情况下写的是git commit -m’annotation’加了注释的话，在log里能更直观 git branch对分支的操作比如说我创建一个新的分支git branch dev那我就得到了一个dev的分支 git checkout切换分支也可以取出误删的文件比如说我rm -f hello.py那我就可以用git checkout hello.py 把它找回来 git merge这个命令可以把两个或两个以上的开发历史加入(合并)一起比如说我想把dev 这个分支 合并到master下就是git checkout master 到主分支下然后 git merge dev git push将本地的版本，推送到远程主机git push origin master git pull取回远程主机某个分支的更新，再与本地的指定分支合并它相当于先做了git fetch，然后再git merge 这些是我碰到的常用，接下来提一下cherry pick git cherry pick就比如说，我想要dev分支的某笔提交的内容，并入我目前的分支上，我不需要全部的内容，那这时候就可以用git cherry pick。那完整的流程就是: 1234git checkout devgit log //查看几次提交的内容git checkout master //回到当前的分支git cherry pick 20fe2f9 //将dev的20fe2f9这个分支给拿过来 就是这些啦，我之前觉得git烦，现在的感觉就是，git真香啊。。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lombok]]></title>
    <url>%2F2019%2F09%2F25%2Flombok%2F</url>
    <content type="text"><![CDATA[最近在学Springboot，看教程看到了一个挺实用的工具，lombok，这边记录一下它的使用方法，和几个常用注解的含义。 安装首先是配置依赖 123456&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.16.18&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 然后去idea的插件库里去寻找Lombok plugin，安装重启就行了。 使用Lombok作用Lombok最关键的作用是能够自动帮我们生成get/set，constructor等等。虽然这些idea能帮我们自动生成，但是只用注解就能默认生成的方式，能在阅读代码的时候更加focus在类的属性。就比如我这个bean 10几个属性，那我改了一个属性的名称，现在下面constructor，get/set方法全都要改，那不是很烦么。所以Lombok的出现，让可读性好了很多。 接下来，说明一些常用注解的方法。 常用注解说明@Data提供类所有属性的 get 和 set 方法，此外还提供了equals、canEqual、hashCode、toString 方法。 @AllArgsConstructor为类提供一个全参的构造方法，加了这个注解后，类中不提供默认构造方法了 @NoArgsConstructor为类提供一个无参的构造方法。 @NonNull注解在 属性 上，会自动产生一个关于此参数的非空检查，如果参数为空，则抛出一个空指针异常，也会有一个默认的无参构造方法。 @Builder这个是最棒的，这边写个例子。比如说我一个pojo的属性是这样的： 1234567@Builder@Datapublic class UserExample &#123; private Integer id; private String name; private String address;&#125; 在加上了@Builder注解后，我们在创建对象的时候，可以这么写： 123456UserExample userExample = UserExample.builder() .id(1) .name(&quot;aaa&quot;) .address(&quot;bbb&quot;) .build();System.out.println(userExample); 这样就可以创建出一个对象了。 这边有个坑 关于子类使用@Builder后，拿不到父类属性的办法。虽然我没有遇到过，但我查Lombok的使用时，很多人都反映过这个情况。这边记录一下解决办法。 首先父类需要一个全参构造方法， 1234@AllArgsConstructorpublic class Parent &#123; private String a;&#125; 子类这边，手写一个全参构造方法， 123456789public class Child extends Parent &#123; private String b; @Builder private Child(String a, String b)&#123; super(a); this.b = b; &#125;&#125; 这样，你在创建子类的时候，就不会找不到父类的属性了。 1Child.builder().a(&quot;testA&quot;).b(&quot;testB&quot;).build();]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringBoot系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程初探]]></title>
    <url>%2F2019%2F09%2F24%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9D%E6%8E%A2%2F</url>
    <content type="text"><![CDATA[我多线程之前3月份准备面试的时候，看过完整的马士兵老师的课，做了手抄笔记，那时候面试的时候还能答得上来，后来去了凌志，写写sql，没怎么碰都忘得差不多了，所以这篇来重新整理一下多线程相关的知识。 线程的基础进程和线程首先问题就是，什么是线程什么是进程，用自己的理解的话，qq音乐app打开，这整体就是一个进程，然后打开以后检测用户登陆，开始匹配今日的最新推荐歌单，调整广告，这些都是线程。所以可以理解成是多个线程组成了一个进程，线程是最小的执行单位。 并发和并行并发是同一时间段，多个任务都在进行。 并行是，单位时间内，多个任务同时执行。 这里面用的主要区别就是同时。 比如说双十一的前一天晚上22点10分，有些稀稀拉拉的购物狂在看不同商店里的打折商品，这是并发。并行是啥呢，双十一零点零分的时候，所有的人都在疯狂下单，这就是并行了。 线程的生命周期和状态New: 初始状态，创建了而未启动的方法 Runnable： 包括两个子状态：ready和running状态，ready表示可以被调用了，running是正在运行。 Blocked：一个线程发起了一个阻塞式I/O操作后，或者申请到了一个由其他线程持有的独占资源时，线程就会进入这个状态，也就是说想申请资源，结果被堵了。等拿到了资源，就又可以转为runnable了。 Waiting：等待状态，线程不急着办事情，给人让路 Timed_Waiting：也是等待，和waiting的区别在于，他是有时间限制的等待，时间限制后，直接进入runnable状态 Terminated：结束了，线程使命完成。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[websocket的实现]]></title>
    <url>%2F2019%2F09%2F22%2Fwebsocket%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[周六家里有事，中午和我妈在饭店吃饭，看到一个挺有趣的点餐机制。扫码点餐，但是我在我这个界面点餐，我妈的手机立马就会更新最新的我点的东西。很好奇这么快的响应速度是怎么做到的，查了一些资料，得出的结论是用websocket实现的，然后周末就来写写看这个东西的原理是啥，是怎么实现的。 websocket是什么WebSocket 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在 TCP 之上，同 HTTP 一样通过 TCP 来传输数据。 传统的http请求客户端模式是什么呢，这边用IBM开发者社区的图来表示： 而websocket的模式是： 可以看到websocket是类似 Socket 的 TCP 长连接的通讯模式，一旦 WebSocket 连接建立后，后续数据都以帧序列的形式传输。这样的模式可见的优点是他很快，在断开连接之前，不需要重复发出请求，这样的模式能极大地节省网络带宽资源的消耗，以及它具有实时性，因此它能够实现我遇到的那种点单模式。 实现一个简单的websocketWebSocket 的实现分为客户端和服务端两部分，客户端（通常为浏览器）发出 WebSocket 连接请求，服务端响应，实现类似 TCP 握手的动作，从而在浏览器客户端和 WebSocket 服务端之间形成一条 HTTP 长连接快速通道。两者之间后续进行直接的数据互相传送，不再需要发起连接和相应。 先看服务端，首先导入依赖， 123456&lt;dependency&gt; &lt;groupId&gt;javax&lt;/groupId&gt; &lt;artifactId&gt;javaee-api&lt;/artifactId&gt; &lt;version&gt;7.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 在这个包中就有我们所需要的javax.websocket.*的 API。 然后开始写测试类，websocket的流程在于，使用@ServerEndpoint( ) 作为服务器端的注解，注解的值被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端。 然后我们需要用concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。然后我们需要创建一个session对象，来存储对话。完整的服务器端代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package test;import java.io.IOException;import java.util.concurrent.CopyOnWriteArraySet;import javax.websocket.*;import javax.websocket.server.ServerEndpoint;/** * @ServerEndpoint 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端, * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端 */@ServerEndpoint("/websocket")public class WebSocketTest &#123; //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。 private static int onlineCount = 0; //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识 private static CopyOnWriteArraySet&lt;WebSocketTest&gt; webSocketSet = new CopyOnWriteArraySet&lt;WebSocketTest&gt;(); //与某个客户端的连接会话，需要通过它来给客户端发送数据 private Session session; /** * 连接建立成功调用的方法 * @param session 可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据 */ @OnOpen public void onOpen(Session session)&#123; this.session = session; webSocketSet.add(this); //加入set中 addOnlineCount(); //在线数加1 System.out.println("有新连接加入！当前在线人数为" + getOnlineCount()); &#125; /** * 连接关闭调用的方法 */ @OnClose public void onClose()&#123; webSocketSet.remove(this); //从set中删除 subOnlineCount(); //在线数减1 System.out.println("有一连接关闭！当前在线人数为" + getOnlineCount()); &#125; /** * 收到客户端消息后调用的方法 * @param message 客户端发送过来的消息 * @param session 可选的参数 */ @OnMessage public void onMessage(String message, Session session) &#123; System.out.println("来自客户端的消息:" + message); //群发消息 for(WebSocketTest item: webSocketSet)&#123; try &#123; item.sendMessage(message); &#125; catch (IOException e) &#123; e.printStackTrace(); continue; &#125; &#125; &#125; /** * 发生错误时调用 * @param session * @param error */ @OnError public void onError(Session session, Throwable error)&#123; System.out.println("发生错误"); error.printStackTrace(); &#125; /** * 这个方法与上面几个方法不一样。没有用注解，是根据自己需要添加的方法。 * @param message * @throws IOException */ public void sendMessage(String message) throws IOException&#123; this.session.getBasicRemote().sendText(message); //this.session.getAsyncRemote().sendText(message); &#125; public static synchronized int getOnlineCount() &#123; return onlineCount; &#125; public static synchronized void addOnlineCount() &#123; WebSocketTest.onlineCount++; &#125; public static synchronized void subOnlineCount() &#123; WebSocketTest.onlineCount--; &#125;&#125; 服务器端代码如上，接下来我们编写客户端代码，通常客户端就是浏览器端，而如今绝大多数浏览器都已经支持websocket，所以我们直接写js代码。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;%@ page language="java" pageEncoding="UTF-8" %&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Java后端WebSocket的Tomcat实现&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Welcome&lt;br/&gt;&lt;input id="text" type="text"/&gt;&lt;button onclick="send()"&gt;发送消息&lt;/button&gt;&lt;hr/&gt;&lt;button onclick="closeWebSocket()"&gt;关闭WebSocket连接&lt;/button&gt;&lt;hr/&gt;&lt;div id="message"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; var websocket = null; //判断当前浏览器是否支持WebSocket if ('WebSocket' in window) &#123; websocket = new WebSocket("ws://localhost:8080/websocket"); &#125; else &#123; alert('当前浏览器 Not support websocket') &#125; //连接发生错误的回调方法 websocket.onerror = function () &#123; setMessageInnerHTML("WebSocket连接发生错误"); &#125;; //连接成功建立的回调方法 websocket.onopen = function () &#123; setMessageInnerHTML("WebSocket连接成功"); &#125; //接收到消息的回调方法 websocket.onmessage = function (event) &#123; setMessageInnerHTML(event.data); &#125; //连接关闭的回调方法 websocket.onclose = function () &#123; setMessageInnerHTML("WebSocket连接关闭"); &#125; //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function () &#123; closeWebSocket(); &#125; //将消息显示在网页上 function setMessageInnerHTML(innerHTML) &#123; document.getElementById('message').innerHTML += innerHTML + '&lt;br/&gt;'; &#125; //关闭WebSocket连接 function closeWebSocket() &#123; websocket.close(); &#125; //发送消息 function send() &#123; var message = document.getElementById('text').value; websocket.send(message); &#125;&lt;/script&gt;&lt;/html&gt; 这样，当两个不同的客户端，对ws://localhost:8080/websocket，发出请求时，这样他们就进入了同一个session中，这样他们就能进行相互的对话了。 效果如图所示： A点了红烧狮子头，这时B的客户端就能直接看到A点了狮子头 在B点了水煮肉片时，A的界面也能立刻出现水煮肉片的选项。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java经典面试题总结]]></title>
    <url>%2F2019%2F09%2F19%2FJava%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[这篇记一些我比较容易搞混的概念还有题目，尽量用自己的语言去表达出来，因为只有自己语言表达出来才是真的理解了吧。 try catch finally之前看过一个题目讲，如果try和finally里都有return，那么它的执行顺序是什么？ try{ return; } catch(){} finally{} return; 他会先执行try块中return之前的语句，再到finally块，然后去try中的return。 然后还有种情况： try{ return; } catch(){} finally{return} 他会先执行try块中return之前的语句，再到finally这边，因为finally中有return，所以他会return后提前跳出。 所以结论是：finally里的语句一定会执行，所以不建议在finally语句里加入return，因为会提前跳出，返回值不是try或者catch块里的返回值。 equals, ==的那些事== 一直是比较两个对象的地址是不是相等的，即两个对象是不是同一个对象。基本类型是比较值是否相同，引用类型是地址是否相同。 equals ，类如果没有覆盖equals方法，则通过equsls比较两个对象时，等价于通过”==”比较这两个对象，如果覆盖了，比如说string里的equals，那就是比较两个对象的值。 这里还有一个题目， 为啥重写equals必须重写hashcode()方法？任何类都具有自己的hashcode。 如果两个对象相等，那么他们的hashcode一定是相同的； 如果两个对象相等，那么两个对象调用equals方法都返回true； 如果两个对象hashcode相同，那么两个对象可能equals不同（概率性问题） 因此我们可以得出结论， 如果说两个对象equals，那么他们的hashcode方法一定是相同的，所以如果equals重写了，hashcode()方法必定重写。 这一篇记得是Java基础的问题，下一篇写多线程。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[svn知识补全]]></title>
    <url>%2F2019%2F09%2F10%2Fsvn%2F</url>
    <content type="text"><![CDATA[因为看到南通很多公司都用svn作为代码版本控制系统，而我之前用得多的是git吧。所以这篇学一下svn的基本操作，这样子面试遇到了也是有点准备的那种。 整体来说，svn和git还是有点像的。 svn的生命周期创建版本库， 检出checkout， 更新update， 执行变更 对文件内容的修改， 复查变化status， 重置修改revert， 解决冲突merge， 提交更改 commit 因为Mac有自带的svn，直接terminal里输入svn help可以看到我的版本是1.10.3 将文件checkout到本地 svn checkout path (path是服务器上的目录) checkout这步就有点像git里的git add，将服务器的内容拉到本地做一个个人的工作空间 往版本库中添加新的文件 svn add file 比如说我svn add test.java 将改动的文件提交到版本库 svn commit -m “LogMessage“ [-N] [–no-unlock] PATH 比较差异 svn diff path（将修改的文件与基础版本比较） 将两个版本之前的差异合并到当前文件svn merge -r m:n path 查看文件或者目录状态svn status path(目录下的文件和子目录的状态，正常状态不显示)其中可能出现的参数：M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定 删除文件svn delete path -m “delete test fle“ 版本回退 svn revert file 以上。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL优化]]></title>
    <url>%2F2019%2F09%2F01%2FSQL%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[写在最前面的说实话，真的没想到凌志是能这么玩的，强制转cobol，不然就进不了岗。我挺懵逼的，明明招进来的时候很明确地说了写java的啊。歇了两天，很认真地思考了一下以后的职业发展方向，还是不能接受转语言，周五选择离职应该是正确的决定。 我现在在想我过去的这两个月，自己所做的事情，有没有浪费时间。想了想，其实感觉也还好，最近真的看了很多数据库相关的东西，虽然没有涉及到那些高阶的，比如说分库分表之类的，但SQL整体的知识，索引的原理，一些sql优化的方向，这些知识是自己学到手了的。这边记录一下我笔记本上记录过的一些SQL优化的方法。 一些基础的优化&lt;&gt;优化不等号通常不能走索引，通常情况下用union连接起来。比如说我这边检索出所有金额不等于100的订单，优化的语句就是 select id from orders where amount >100） union all (select id from orders where amount 0); OR优化or是无法使用联合索引的，比如说我要选出电话号码等于1111或者用户编号是11的用户姓名，就该用union来连接起来。 (select username from users where mobile = '1111' union (select username from users where id = 11); 这边记录一下,union和union all的区别，union是会压缩重复的值，union all并不会 in 优化之前我记过，in适合主表大，字表小的情况，exist适合主表小子表大的情况，但不管怎么说都是子查询，这种偏嵌套的运行效率都不怎么高，应该尽量用left join来表示,我们这边举个例子是，找出身份是vip的人的用户的单号，涉及到两张表，user表和order表，我们来用left join写一下。 select o.id from orders o left join user u on o.user_id = u.id where u.class = 'VIP'; 几个不要 我前面索引那篇写过，不要对索引的数据进行任何计算，不然都会让索引失效。 不要用select *，这样子一定会走全表扫描，好好写表中的列 join虽然好，但不要连接超过三个以上的表。 如何发现需要优化的语句打开慢查询日志首先打开慢查询日志set global slow_query_log='ON';再次查看是否开启show variables like'%slow_query_log';设置时间的阀值set global long_query_time = 3; 这样我们就设置好了阀值是3秒钟。 接下来要是查询语句超过了3秒，MySQL会自动地记录到慢查询日志中。我在我的mac上遇到的问题是，我找不到这个慢查询日志的地址，查了文档，我们可以使用 SELECT @@slow_query_log_file; 找到他。 用Explain查看执行计划用这个对查询是否命中索引非常有用。 用我这边有的一个范例库nba举个例子 select player_name, team_name from player left join team on player.team_id = team.team_id; 用explain看一下，这个的结果是： 在这么多参数中，我们主要关注的是type列，type列的几种情况是： 效率从低到高依次为 all &lt; index &lt; range &lt; index_merge &lt; ref &lt; eq_ref &lt; const/system，我们希望执行计划至少可以使用到range级别，如果看到了all和index，就需要去从SQL语句和索引设计的角度上进行改进。 以上。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL经典实例1]]></title>
    <url>%2F2019%2F08%2F24%2FSQL%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B1%2F</url>
    <content type="text"><![CDATA[这是我最近找到的一本很棒的关于SQL的书，里面记录了150多个SQL常见问题和解决方法，最近做了挺久的sql优化，感觉自己还是蛮熟练的了，结果看到这本是真的被amaze了一下。复杂场景下，sql得会写才有机会优化吧，这本书追了追了。 1.SQL中使用条件逻辑case函数的使用 Select ename,sal, case when sal= 4000 then ‘underpaid’ else’ok' End as status from emp 记录一下case函数的用法 case when value then statement else ’statement' end case; 2.把null值转换为实际值有两个函数可以用coalesce，返回的是参数列表里的第一个非null值。 select coalesce(comm,0) from emp; 或者用case函数 select case when comm is not null then comm else 0 end From emp; 3.排序时对null值的处理想把所有不为null的数放到排序的前面 select ename,sal,comm from(select ename,sal,comm, case when comm is null then 0 else 1 end as is_null from emp)x order by is_null desc, comm 4.union 和 union all的区别union等同于针对union all的输出结果再执行一次distinct操作 5.查询编号为10的部门的总工资和总奖金因为部分员工获得了不只一次奖金，所以这边有两种方法可以把重复项目给清除 一种是在聚合函数之前，用关键字distinct 另一种是，在进行连接查询之前执行聚合运算 select deptno, sum(distinct sal) as total_sal, sum(bonus) as total_bonus from( select e.empno, e.ename, e.sal, e.deptno, e.sal*case when eb.type = 1 then .1 when eb.type =2 then .2 end as bonus from emp e, emp_bonus eb where e.empno = eb.empno and e.deptno = 10 )x group by deptno; group by函数通常和聚合函数一起用，having的使用是因为，where不能和聚合函数（sum）一起使用 6.上一题的拓展 如果只是部分人获得了奖励，就需要left join，将没获得奖金的人的工资也算进来 7.full join是left join和right join的并集]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于索引]]></title>
    <url>%2F2019%2F08%2F13%2F%E5%85%B3%E4%BA%8E%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[昨天碰到一个索引需要优化，翻了挺多资料，琢磨着得整一篇全的讲讲索引的知识点。 什么是索引 我的理解就是书的目录，对数据进行定位和查找，速度极快。那既然是目录，问题就是，如果我数据更改的频次很高，比如说添加删除等，那这个目录就是得频繁的修改。这也是索引的特性，对于需要经常进行修改的表，我们并不添加索引。索引的添加语句是： CREATE UNIQUE INDEX index_name ON table_name (column_name) ; 索引的种类从功能逻辑上来说普通索引:没有任何约束,基础索引 _唯一索引_：在基础索引的基础上添加了数据唯一性的约束 _主键索引_：在唯一索引的基础上添加了不为空 _全文索引_：用的不多 （这种一步一步约束提升的样子有点像数据库设计三范式。。 从物理实现上来分_聚集索引_：按照主键来排序存储数据 _非聚集索引_：会有单独的存储空间存放非聚集索引，这些索引项是按照顺序存储的，但索引项指向的内容是随机存储的，也就是说查询得分两步骤，先找到索引，再通过索引找到存储的数据。 通常情况下，聚集索引比非聚集索引效率更高一点 按照字段个数划分_单一索引_：索引列为一列时 _联合索引_：索引列为多列时创建联合索引的语句 create index 索引名 on 表名（字段名1，字段名2） 对于联合索引来说，有最左匹配原则。 索引为啥默认采用b+树作为存储的数据结构整理了一张图，很直接了。 索引的使用原则啥时候创建索引呢 字段的数值有唯一性的限制 频繁作为 WHERE 查询条件的字段 需要经常 GROUP BY 和 ORDER BY 的列 UPDATE、DELETE 的 WHERE 条件列，一般也需要创建索引 DISTINCT 字段需要创建索引 哪些情况下索引会失效 如果索引进行了表达式计算，则会失效 如果对索引使用函数，也会造成失效 （比如说我substring一下） 在 WHERE 子句中，如果在 OR 前的条件列进行了索引，而在 OR 后的条件列没有进行索引，那么索引会失效 当我们使用 LIKE 进行模糊查询的时候，后面不能是 %（这边有个有意思的，%123不行，但是123%是能走索引的） 索引列与 NULL 或者 NOT NULL 进行判断的时候也会失效。 索引列与 NULL 或者 NOT NULL 进行判断的时候也会失效。（所以我们设计表的时候，最好都加上not null的约束） 以上是我参考了SQL必知必会和一些csdn的blog总结的索引相关知识。总感觉对SQL这块，还得再写一篇关于SQL调优才行。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL必知必会学到的]]></title>
    <url>%2F2019%2F07%2F13%2FSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[因为现在培训时期没有机会接触业务代码，所以就是做一些SQL优化的事情，然后遇到一些之前没有学过的SQL写法，比如说判断啊之类的，然后就买了“极客时间的SQL必知必会”的课，是真的不错，所以这边再开一篇，记录一下自己学到的新的写法。 1 utf8_general_ci 对大小写不敏感。 Utf8_bin是敏感的。 2 设计数据库表的经典“三少一多”原则 数据表个数越少越好 字段个数越少越好 联合主键字段个数越少越好 使用的主键和外键越多越好（提升相互之间的关联使用率） 3 查询常数Select ‘农药’ as platform, name from heroes; 4 去重用的distinct，必须写在sql语句的最前面Select distinct name, age from users; 5 百分比的表示Select concat(round(mp.max/mp.base,2)*100, ,’%'); 6 表创建相关有时候为了防止删除关联表，就可以使用外键约束。Set foreign_key_checks =1;这样删除表的时候，就会报出 “a foreign key constraint fail”。 存储中文信息的时候，表头创建加一句SET NAMES utf8mb4;Utf8支持的最大字符长度是3个字节，所有4个字节的宽数据就存储不了，这时候就得改成utf8mb4 7 where 和 having的区别where 是对数据的过滤，having是针对分组的 8 子查询 any，all的用法select name, height from players where height &gt; any(select height from player where team_id = 1002); 9 子查询什么时候用exists，什么时候用in当查询字段进行了索引时，主表 A 大于从表 B，使用 IN 子查询效率更高；相反主表 A 小于从表 B 时，使用 EXISTS 子查询效率更高。 虽然是这么说，但是真的少用子查询好吧，因为效率真的不高 10 连接查询内连接左外右外自连接 例子：三支球队比赛，列出所有的可能对阵表Select t1.name, t2.name from team as t1 left join team as t2 on t1.id t2.id; 11 视图 create view player_above_avg_height as Select player.id, height From player Where height > (select avg(height) from player) 我查看了视图和临时表的区别，我还是挺好奇，视图在实际开发中，到底被用在哪里的。 12 存储过程 CREATE PROCEDURE `add_num`(IN n INT) BEGIN DECLARE i INT; DECLARE sum INT; SET i = 1; SET sum = 0; WHILE i]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL Cheatsheet]]></title>
    <url>%2F2019%2F03%2F13%2FSQL%20Cheatsheet%2F</url>
    <content type="text"><![CDATA[SQL语句集合这篇是用来记录我之前忘记的好多SQL语句的，因为有些SQL语句真的是不常用就会忘记的，记到这边来下次写SQL的时候可以看。 皮一下开篇先来皮一下，因为真的好几次忘记了自己的密码是什么，然后去网上找那些改密码的方法。所以干脆这边就记录一下。 先把MySQL服务关闭。 sudo /usr/local/mysql/support-files/mysql.server stop 然后进入mysql的bin目录。cd /usr/local/mysql/bin。 绕过用户验证。mysqld --skip-grant-tables 重新开一个命令行，直接进mysql。 set password for 'root'@'localhost'=password('xxx'); 这样子新的密码就修改好了。如果你需要修改原来的老密码，用的是 update user set password=password('123456') where user='root'; DDL语句创建数据库的 DROP TABLE IF EXISTS admin; CREATE TABLE admin ( username varchar(20) NOT NULL DEFAULT '', password varchar(32) DEFAULT NULL, PRIMARY KEY ('username') ) ENGINE=InnoDB DEFAULT CHARSET=utf8; 创建表的 DROP TABLE IF EXISTS t_stu; CREATE Table t_stu( stuId int(11) NOT NULL AUTO_INCREMENT, stuName varchar(20) NOT NULL, PRIMARY KEY(stuId) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8; 修改表的（增加，删除列） ALTER TABLE t_student ADD col char(20); ALTER TABLE 't_student' DROP COLUMN col; 删除表 DROP TABLE table; DML语句插入 INSERT INTO table (col1,col2) VALUES(val1,val2); 插入检索出来的数据 INSERT INTO table(col1,col2) SELECT * FROM table2; 更新语句 UPDATE table1 SET col = val WHERE id = 1; 删除语句 DELETE FROM table WHERE id =1; 清空表 TRUNCATE TABLE table； TRUNCATE TABLE 删除表中的所有行，但表结构及其列、约束、索引等保持不变。 查询语句实在是有点多，一些常用的我不会忘的就不记了，写点我容易忘的 通配符的用法 SELECT * FROM table WHERE col LIKE '[^AB]%'; -- ^否定，[]集合，匹配其中之一，%匹配多个字符，_匹配一个字符 连接字段 SELECT CONCAT(TRIM(col),'('TRIM(col2),')') FROM student; 日期计算记一个日期之差的把 SELECT DATEDIFF('2007-12-31','2007-12-30'); 接下来就是比较难的部分了： 分组是将具有相同的数据值的行放在同一组中 SELECT col, COUNT(*) AS num FROM table GROUP BY col 这里记一下，where是过滤行的，having是过滤分组的，group by默认出现在where之后，order by之前 子查询就不记了吧，因为效率是真的低，一般来说子查询都能用连接查询替代，所以接下来用一张神图来概括所有的连接查询。 大概常用的就是这些了吧。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令相关]]></title>
    <url>%2F2019%2F03%2F10%2FLinux%E8%AF%AD%E5%8F%A5%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[因为我一直用的是Mac OS，这是一个类Unix的系统，然后之前大一大二写Python的时候，有一本里面，单独分了一章出来讲命令行语句，所以基础cd，mkdir，touch我也知道，写这个是因为我看到明天有个校招的公司要求有Linux基础，我这边抱个佛脚，记录一些使用频率高点的其他的命令。 帮助直接上来就是帮助，有时候假如我一个命令忘记了就直接用man + 命令去查看，比如我man ps，就能看到process status的详细信息。 但如果只想看简洁版的，就用–help。 Vim相关之前学的时候我是挺讨厌vim的，可能我没到那个级别，用vim修改python路径或者java路径的时候，总是不会用，后来用的多了感觉也还行。 vim分三个模式： 一般指令模式 ：默认模式，可以查看内容 编辑模式 ：按i进入，退出按esc _指令列模式_： 按下：进入，保存，退出等操作。 一般的指令模式有: :w 写磁盘； :w! 强制写磁盘 :q 退出 :q! 强制退出不保存 :wq 写入磁盘后离开 :wq! 强制写入磁盘后离开 文件和目录操作ls,cd,mkdir,cp,rm这些我熟悉就不写了吧，写个我自己老是忘的: touch [-acdmt] filename 这里面的常用的参数含义是： -a:更新 -c:文件不存在就创建新文件 -m: 更新 权限管理chmod [-R] xyz dirname/filename 好像是计算机组成原理的时候学过，r:4,w:2,x:1 这边的xyz指的是三组人群，owner，同组用户，其他用户 也可以用符号来设定权限： # chmod [ugoa] [+-=] [rwx] dirname/filename - u：拥有者 - g：所属群组 - o：其他人 - a：所有人 - +：添加权限 - -：移除权限 - =：设定权限 获取文件内容cat:取得文件内容 tac：cat的反向操作，从最后一行开始打印 more：可以一页一页地查看文件内容 less：和more差不多，但有个向前翻页的功能 压缩文件记一个常用的gzip吧 gzip [-cdtv#] filename -c ：将压缩的数据输出到屏幕上 -d ：解压缩 -t ：检验压缩文件是否出错 -v ：显示压缩比等信息 -# ： # 为数字的意思，代表压缩等级，数字越大压缩比越高，默认为 6 进程管理这块应该是我看到的最多的面试题目。 ps全称是process status ，查看某个时间点的进程信息的 ps -I :查看自己的进程 ps aux 查看系统所有进程 ps aux | grep threadx 查看特定进程 top实时显示进程信息 top -d 2 pstree查看所有进程树 Pstree -A 讲真。。主要一般开发都在unix这边，这个不练是真的记不住。我去装个虚拟机跑centos吧。。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[json的那些事]]></title>
    <url>%2F2019%2F02%2F20%2Fjson%E7%9A%84%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前几天写了Ajax相关的知识，然后这几天写前后端传json磕磕绊绊中学到了点新的，这边来记录一下。 页面发Ajax请求过来，我怎么收$(function(){ // 绑定点击事件 $("#btn").click(function(){ $.ajax({ url:"user/testJson", contentType:"application/json; charset=UTF-8", data:'{"addressName":"aa","addressNum":100}', dataType:"json", type:"post", success:function(data){ alert(data); alert(data.addressName); } }); }); });现在传过来一个键值对对象，我这边就得在我的控制器参数里面加上@RequestBody注解 @RequestMapping("/testJson") public void testJson(@RequestBody Address address) { System.out.println(body); } 这边的@RequestBody会自动地将json数据转化成java bean对象。 将JavaBean对象转成json比如说我现在服务器查到了信息，需要将数据返回给前端 @RequestMapping("/testJson") public @ResponseBody Address testJson(@RequestBody Address address) { address.setAddressName("上海"); return address;} 只需要在返回值前面加上@ResponseBody就行了，这样他会自动解析bean对象转成json。 Gson当然上面的操作没有一个第三方包的支持是不可能的，@RequestBody和@ResponseBody都没有内置json的解析器。 我看的绝大多数教程用的都是jackson去解析json，然后我看到一篇比较近期很流行的json解析器排行时，看到了谷歌开源的Gson。相比阿里出品的FastJson，他有更好的稳定性，所以这边讲一下Gson的用法。 首先是Gson的实力化Gson gson = new Gson(); 我们可以通过GsonBuilder对Gson进行个性化的配置： gson = new GsonBuilder() .setLenient()// json宽松 .enableComplexMapKeySerialization()//支持Map的key为复杂对象的形式 .serializeNulls() //智能null .setPrettyPrinting()// 调教格式 .disableHtmlEscaping() //默认是GSON把HTML 转义的 .create(); 各种数据和json之前的转化JavaBean转json String jsonStr = gson.toJson(student); List和Map 转json List list = Arrays.asList("1", "a", "3", "rt", "5"); String jsonStr = gson.toJson(list); Map content = new HashMap(); content.put("name", "ericshang11"); content.put("age", "11"); String jsonStr = gson.toJson(content); json转其他数据类型先看一个json转成JavaBean的： String studentJsonStr="{\"name\":\"ericshang11\",\"age\":11}"; Student student1 = gson.fromJson(studentJsonStr, Student.class); 这边用到了一个fromJson方法，他的第一个参数值是需要转的json对象，第二个是要转成的类型。但是当我们不明确要转成的对象是什么的时候呢，我们就可以用Gson提供的TypeToken，这是一个数据类型转换器。 List ps = gson.fromJson(str, new TypeToken(){}.getType());]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ajax]]></title>
    <url>%2F2019%2F02%2F16%2FAjax%2F</url>
    <content type="text"><![CDATA[之前学Java Web的时候学过Ajax，当时得创建XMLHttpRequest，然后通过这个XHR去和服务端进行交互。最近写毕设的时候想通过Ajax实现点击按钮，弹出对话框（用css3的z index实现），然后对数值进行修改，点击确定post到服务器的操作。然后现在就不用js原生的那种方法实现，用jQuery封装的Ajax来实现。 配置和通常情况下的写法第一步就是引入jQuery的文件。可以从bootcdn上找到link。 比如说页面上我有一个修改按钮，那我再head里的js代码如下： $("button").click(function(){ $.ajax({url:"emp/edit", data:"" type:"GET", success:function(result){ //假如请求成功，执行的方法是 }, error:function(result){ //假如访问失败，执行的方法 }}); }); 然后还有一种场景是在一个js方法里，调用了ajax去向服务器发出请求，写法是： function doPost(args){ $.ajax({ url:"emp/depts", type:"GET", success:function(result){ do something }})}; 以上两种是通常情况下的ajax使用场景。 对于我来说，一定要注意到括号的开闭啊，真的是好多次报错就是因为括号没有合理地开闭。 带参数解析接下来，说一下，ajax请求里的这些常用的参数是什么意思。 url : String类型的参数，请求的地址。 _type_： 请求的方法，通常情况下是post或者是get，这边正好再回顾一下http的get和post方法。 GET 从指定的资源请求数据；post 向指定的资源提交要处理的数据。 其中相同的点在于，都可以从服务器取得数据， 但GET可能会拿到缓存数据，但post拿到了也不会缓存数据。 data : 提交到服务器的数据，一般是字符串类型；如果是对象类型，那就转成键值对的形式。比如这个样子： data: { "userName": $('#userName').val(), "password": $('#password').val(), }, dataType_: 预期的服务器的返回类型是啥：通常情况下有xml，text，json，但json一般来说是主流吧，明天再写一篇讲如何用Gson去解析服务器传过来的json数据的。 success 和 error 要求为Function类型的参数，记录的是请求成功或者失败后的回调函数。 一般使用的就是这几个参数。 用到的其他的一些jQuery函数和方法写到一个批量删除数据的时候，用到一个each函数，这边记录一下ajax each函数的用法。 $.each( object, callback ) 这边object是遍历的对象，数组或者是元素； callback是用于循环执行的函数。 另外还有一个prop方法这边记录一下。 prop() 方法设置或返回被选元素的属性和值。 当该方法用于返回属性值时，则返回第一个匹配元素的值。 $(selector).prop(property) 当该方法用于设置属性值时，则为匹配元素集合设置一个或多个属性/值对。 $(selector).prop(property,value)]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[uml相关的元素在这边啊]]></title>
    <url>%2F2019%2F02%2F12%2Fuml%2F</url>
    <content type="text"><![CDATA[最近看一些常用设计模式的时候，老是看到uml图，软件工程的课上学过，学完就忘了，没想到设计模式里到处都是，这里贴一张在UML Diagram上面找到的一张图，是关于uml的常用元素的。 然后这边再记录一点对象之间的关系，虽然图上已经有标注了，但怕自己有时候会脑抽弄错吧。 对象之间的关系泛化关系 Generalization 空心箭头线is-a的关系，比如说，动物和狗，狗 is-a 动物，所以是泛化关系，用的箭头是空心箭头！ 实现关系 Realization 实心箭头的虚线实心箭头的虚线表示的，就是类与接口的关系。 关联关系 Association 就直线一条直线表示 聚合关系 Aggregation 带空心菱形的实线是整体和部分的关系，比如说汽车和轮胎，方向盘这些零部件。图例用带空心菱形的实线表示，菱形指向的是实体。 组合关系 Composition 带实心的菱形也是整体和部分的关系，但是和聚合关系不同的是，部分不能够独立存在，这边的经典例子是公司和部门，要是没有公司，部门的存在没啥意义。图例是用带实心的菱形表示。 依赖关系 Dependency 带箭头的虚线是一种使用的关系，一个类需要另一个类的协助。 我感觉也不需要刻意去背吧，以后要画了要看了，翻出这篇来看一下就好了，所以在这边mark一下。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PageHelper的使用]]></title>
    <url>%2F2019%2F02%2F09%2F%E5%88%86%E9%A1%B5%2F</url>
    <content type="text"><![CDATA[之前写网页写到分页的时候都很头疼，因为涉及的数据太多了，分页的信息得封装到一个类里面，页面信息又得分装到一个类里面，很麻烦，所以这边尝试着用Github 开源的MyBatis PageHelper做一次。 配置那第一步还是加载依赖， 接着在MyBatis全局配置文件中配置拦截器插件。拦截器的具体实现这边先不多花时间进行关注，我们去看一下使用流程。 使用流程首先我们需要 //获取第1页，10条内容，默认查询总数count PageHelper.startPage(1, 10); //紧跟着的第一个select方法会被分页 List list = employeeService.getAll(); //使用pageinfo包装,传入连续显示的页数，这个5是相邻页码的意思 PageInfo pageInfo = new PageInfo(list,5); //接下来我们就可以用model以键值对的形式将值传出去了 model.addAttribute("pageInfo",pageInfo); 看一下神奇的PageInfo这边事实上就是对分页的相关信息进行了一个封装，可以看到封装的数据很全面，这样对前端代码的编写带来了极大的便利。 然后这边记录一下前端的相邻页码的写法。挺有意思的。 总结可以看到PageHelper实现的思想其实是一个更大的封装。不仅将分页信息封装起来，还将页面的详细信息封装起来。挺方便的。并且根据文档，他的实现还是很安全的。 只要你可以保证在 PageHelper 方法调用后紧跟 MyBatis 查询方法，这就是安全的。因为 PageHelper 在 finally 代码段中自动清除了 ThreadLocal 存储的对象。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Generator的使用]]></title>
    <url>%2F2019%2F02%2F03%2Fssm%2F</url>
    <content type="text"><![CDATA[之前学SSM的时候，因为时间不多，所以有一些不是核心的知识点我就直接跳过了，比如说MyBatis的逆向工程，也就是Mybatis Generator的使用，我就没有去管。然而事实上，自己写的那个接口的映射文件总写的很繁杂，在复杂的业务上，那写的叫一个长。据说Mybatis Generator创建的是非常标准化的映射写法，所以这次来学习一下。 Maven中加入依赖并配置插件信息那第一步肯定是在maven中加入依赖。 然后因为使用的是idea，所以我们用idea plugin的形式来配置generator的相关信息。 我这边踩过的坑是啥呢，没加mysql-connector，插件是不会调用上面的dependency里的mysql-connector的，所以要额外配一个，然后我一开始不清楚要写configurationFile，现在看来是蛮蠢的，你不写配置文件的话，用的应该是默认的那种，默认的文档结构和我自己需要的应该是不一样的，所以我们这边自己配置一个路径地址，自己也好找。 接下来就是写运行的配置信息这边包括了，你想把创建的pojo啊，mapper接口和mapper映射文件放在哪里，直接上代码,我注释的挺全的。 然后这边我遇到一个问题呢，是idea带来的，我本来想把mapper映射文件和mapper接口放在一起，但idea的思想是，你的xml就应该和resources放在一起读取。那不违背这个原则，我就在resources里面创建了新的directory，和我mapper接口的路径保持一致，这样就能一一对应起来。 这些配置做完以后，MyBatis Generator就会把你在MySQL数据库的数据，标准化地配置出来。 看一下他生成的接口映射文件pojo和mapper接口是不用看了，可以看到是相当的全，我更在意地是他的mapper接口映射文件。可以看到他把一些需要重复使用的sql语句，给归并了，抽出来放在了表头的sql里，这样子看下面的某个业务需要使用到这些，只需要include refid就行，这种模块化的思想，让代码的可读性提高了很多。 以上是我从MyBatis Generator里学到的新的东西，当然，他生成的接口不可能是完全符合我们的业务需求的，所以如果我们有一对多或者多对一的需求，我们可以自己扩充，然后这边记得，Mybatis的一对一的关键词是association，一对多是collection，我自己记反了，结果2个小时就这么没了。。。真的头疼。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SSM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL编码的坑]]></title>
    <url>%2F2019%2F01%2F31%2FMySQL%E7%BC%96%E7%A0%81%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[今天开始做毕设，SSM框架整合的蛋糕店后台管理系统，第一天做得就有点心态崩，搭好环境，做测试的时候，死活中文显示乱码，可我都设置了characterEncodingFilter了啊，排查了一天，发现是MySQL创建时没注意到的问题。这边记录一下。 utf-8和utf-8mb4 创建数据库的时候一定要选择好MySQL的编码啊，通常情况下选择，UTF-8mb4。这边记录一下utf-8 和utf-8mb4的区别。 UTF-8 编码是一种变长的编码机制，可以用1~4个字节存储字符。因为历史遗留问题，MySQL 中的 utf8 编码并不是真正的 UTF-8，而是阉割版的，最长只有3个字节。当遇到占4个字节的 UTF-8 编码，例如 emoji 字符或者复杂的汉字，会导致存储异常。从 5.5.3 开始，MySQL 开始用 utf8mb4 编码来实现完整的 UTF-8，其中 mb4 表示 most bytes 4，最多占用4个字节。从 8.0 之后，将会在某个版本开始用 utf8mb4 作为默认字符编码所以以后创建项目直接选择utf-8mb4以应对各种各样的数据。 什么是collation再然后就是在修改完character set之后，可以看到一个collation，collation是啥呢。collation是排序字符集，因为除了要存储字符，还需要排序或者比大小，这时候就推荐用utf8mb4_general_ci或者用utf8mb4_unicode_ci，这里面的参数含义是： utf8mb4是编码方案 后面跟着的是校对算法版本，也就是排序的依据是啥 在接下来有两个参数可以选择，ai和ci，ci是不区分大小写的，ai是指口音不敏感。 就是这些，继续写毕设了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[代理模式]]></title>
    <url>%2F2019%2F01%2F17%2F%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[今天看到aop的时候，听到了一个新的名词，这是我在单例模式和工厂模式之后听到的一个新的模式。加上我看了一下动态代理模式的代码和反射又有关系，是真的挺难看懂的，所以这边写一篇理解一下这个模式。 使用场景是啥先不说aop，先看名字，代理，一下子就想起来我妈朋友圈删不光的微商代理了。代理的意思就是我主体不想做的，请别人来做的意思吧。就比如说，我赚钱赚得贼多，数钱的活就不是我做了，我要聘个小秘帮我数钱（你怕是活在梦里）。那我这边用个糖果店卖东西的时候顺便打广告的例子来说。 静态代理我现在是一个店铺接口，我的职责就是销售。 public interface groceries { void sell(); } 我们这里有卖德芙巧克力。 这就是被代理对象 public class Defu implements groceries { public void sell() { System.out.println("我卖德芙巧克力的"); } } 代理对象 public class defuproxy implements groceries { private defu defu; public defuproxy(defu defu){ this.defu =defu; } public void sell(){ advertise(); defu.sell(); } public void advertise(){ System.out.println("打广告的来了"); } } 那当客户来访问的时候。 public class testDefu(){ public static void main(){ Defu defu = new Defu(); Proxy proxy = new proxy(defu); proxy.sell(); }} 这样的话，运行结果就是： 这样的话，用户就不需要知道被代理对象的具体的行为，就可以通过代理对象进行相应的操作。但是静态代理有个麻烦的地方是，代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多.同时,一旦接口增加方法,目标对象与代理对象都要维护。那这个时候就可以用我前几天学的反射，来进行动态代理。 动态代理动态代理使用的是InvocationHandler(Interface)接口和java.lang.reflect包里的代理类，proxy。具体的修改代码如下，接口和被代理对象不变，所以就不重复写了。 public class defuproxy implements InvocationHandler { private Object target; ​ public defuproxy(Object target) { ​ this.target = target;} ​ @Override ​ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { ​ System.out.println("欢迎来到商店"); ​ method.invoke(target, args); ​ return null;}} 测试的main方法是： public class test { ​ public static void main(String[] args) { ​ groceries defu= new defu(); ​ InvocationHandler shop1 = new shops(defu); ​ groceries proxy = (groceries) Proxy.newProxyInstance(defu.class.getClassLoader(), ​ defu.class.getInterfaces(), shop1); ​ proxy.sell(); ​ } } 这样就能动态地创建代理对象了。 代理模式的优点：不需要去修改源代码的情况下，就可以对原代码进行功能的增强，这就是aop的思想。通过代理模式，职责更加清晰了。代理模式很好用，但他也带来了一些性能上的问题，有一些复杂场景下的代理会写的很复杂，所以代理模式的使用还是需要去斟酌的。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代理模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反射的相关知识]]></title>
    <url>%2F2019%2F01%2F13%2F%E5%8F%8D%E5%B0%84%2F</url>
    <content type="text"><![CDATA[这学期学了spring,struts和hibernate，还学了点MyBatis，做了两个项目，感觉还行。然后昨天晚上回家路上在脑子里面转，突然想起来上课的老师一直说的，反射是一切框架的基础，没有反射就没有框架。但我竟然反射是啥都没有好好看过，查了点资料，翻了书，按照我的理解，我来写写反射的相关的事情。 为什么我们需要反射​ 平时我们操作数据的时候，都是上来直接new对象，然后拿属性，调用方法。编译器是根据类型进行代码的检查编译的，编译完了我们才能操作对象。 ​ 反射不一样，它是在运行时，而非编译时获取类型信息的。既然是在编译时，那不可避免的就是，他的效率不是那么高的，因为有时候在调用方法前，反射得首先查找到对应的方法才能执行，但是为啥反射的使用频率还是那么高呢。 ​ 因为它够灵活。 ​ 我看到的一个案例是，假如我有一个软件，去给公司去使用，一开始用的是MySQL，后面换成了Oracle，这种时候不可能去停下来找代码改成Oracle吧，不然以后再换个啥啥数据库的，还是得再改一次，这种时候就可以使用反射，去动态地读取Oracle配置文件里的信息。 一些反射的代码代码编译就是将java文件转换成.class文件的过程。这里我们反射就是操作.class。那如何获取Class对象呢。 第一种 类名.class 第二种 Class.forName("类名") 第三种 Object类有一个getClass方法 类名.getClass() 那我们这边拿到了Class以后，能做些什么呢。 可以创建对象 Class c =Class.forName("Object"); Object o = c.newInstance(); 可以拿对象的属性，这边有两种方法，一种是getDeclaredFields,一种是getFields,区别在哪里呢。不带declared的只可以获取public的字段，带declared可以获取private，protected的属性。 Fields f[] = c.getDeclaredFileds(); 既然属性都能拿到，那相对应的，方法啊，构造方法啊，都能用反射拿到。 然后一种暴力的不提倡的越过类型检查的方法，比如说我一个对象里有一个int的数组，我如何在里面放个字符串。 Class c = Class.forName("Object"); Field f = c.getDeclaredFields("a"); f.setAccessable(true); f.set(obj,value); 只要通过反射打开属性的setAccessable，就能往里面越过类型检查添加其他数据了，但是这是不提倡的。 顺便提一下，如何通过反射调用方法，invoke方法。 method.invoke(obj,args) Class c = Class.forName("Object"); Method method = c.getMethod(methodName, argsClass); //通过方法名称和参数获得方法 method.invoke(Object,args); Invoke 方法里第一个是对象，第二个是参数。 以上是我找到的一些反射相关的内容。写着写着就感觉对Spring的ioc 有了一点更清晰的理解了。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好广告，坏广告]]></title>
    <url>%2F2018%2F07%2F14%2F%E5%A5%BD%E5%B9%BF%E5%91%8Aor%E5%9D%8F%E5%B9%BF%E5%91%8A%2F</url>
    <content type="text"><![CDATA[我真以为我躲得蛮好的，结果还是在今天下午看足球回放的时候看到了知乎的最新广告。 广告来自叶茂中团队，算是中国最老的营销策划团队了吧。恒源祥，娃哈哈，脑白金，溜溜梅，知乎，蚂蜂窝这些的，都是叶茂中的手笔。叶茂中团队的作品是非常具有代表性的潜意识广告，不断重复，反复重复，把受众当巴浦洛夫的狗一样看，直到最后形成条件反射。 有人说他坏，一点美感都没有，多次重复，看了想吐，观感体验极差。有人说他好，因为这样的营销策略简单直接，相比其他“自嗨型”广告，这样的广告是真的会带动数据指标的提升；说好坏之前，我先自问了一遍，广告的目的是啥？ 广告是为了广而告之，是为了准确表达广告信息，是为了树立品牌形象，是为了引导消费者，激发购买欲/使用欲。那一般情况下，我们可以说成功的广告是具备以上所有特征的。 那叶茂中的广告是否具备这些特征呢？虽然我不喜欢，但不得不承认，从传播效果上来说，他的广告是具备上述特征的。就拿知乎这次的广告来说，广告词是你知道吗？这条广告之前，你去问街上的人，有问题怎么办，80%的人会说百度一下；这条广告之后，是会有一个更大的比例说还有知乎的。 图一是广告播出以后，知乎的百度指数增幅，图二是知乎在ios平台排名趋势的上升。 所以从营销的角度来说，叶茂中的广告是一条成功的广告，唯一的一些对品牌带来的负面影响，比如说对此时此刻广告的厌恶，但随着时间的流逝，这些负面评价是会淡化的，就像我们几年前那么厌恶溜溜梅的广告，但今天再听到它，你不会生成和几年前一样的厌恶感的，但不变的是啥，你知道有个话梅牌子，叫溜溜梅。 广告的受众实在是太广了，人员分布，层次，受教育程度，环境，因素太多。喜欢和不喜欢，好与坏，都是受太多因素影响的事情，都太主观了。所以我之前说的是叶茂中的策划，是成功的营销案例，我没提好或者坏的营销。 那从我的角度来说，我不喜欢这样的广告，是因为啥呢？我感觉它太急于求成了。 我喜欢苹果的1984以至于后面的这些广告片，喜欢金士顿地铁广告，喜欢台湾奥美做的《我害怕阅读的人》，喜欢去年999感冒灵感恩节广告片，还有很多其他的。 因为啥呢？他们所传播的信息更多，有公司核心价值的，抓住用户心理激发你同理心的。他们的共通点是，他们都传到了一个讯息：我的产品能给你创造更多的价值。这种为用户创造价值的体系是我非常希望看到的。 我也不懂我从哪个时刻从自嗨型广告走出来，开始意识到为受众/用户创造价值的重要性的。但我相信只有先为用户创造了价值，你的受众/用户才会更加信赖你的产品，才会真正实现我从叶茂中的营销书里看到的高级概念，让用户成为你产品的布道者，他们不光自己去使用，他们会非常反消费心理学地去推荐身边的人去使用。 为了好的营销效果，有千万种达到目的的方式，他选择了最简单粗暴的那种，所以我主观的觉得不喜欢。 我今天写这篇文章是为了啥呢？更多地提醒自己吧，在以后的产品生涯里，要记得为用户创造价值，产品的价值和用户的价值应该是正相关的。是有一万种方法通向成功，我选择用户与产品双赢的那种。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[总结]]></title>
    <url>%2F2018%2F07%2F12%2F%E8%BF%90%E8%90%A5%E4%B9%8B%E5%85%89%2F</url>
    <content type="text"><![CDATA[为什么看最早知道运营是之前上网易产品课的时候，听过老师讲的大概概念，说过产品经理一定要懂一些运营。然后在我找实习的时候，因为大多数公司发出来的招聘，有写产品经理的，有写产品助理的，有写产品实习生的，那为了不错过机会，我统一搜索产品，这时候，挺多的产品运营就冒出来了。种种条件下，我找了这本《运营之光》，补一下运营的相关知识。 学到了什么运营的职责很多，远远超过了我所想的内容运营，活动运营，产品运营，用户运营；在现在的互联网时代，运营还有APP商店运营，SEO/SEM运营，广告投放运营。其中比较吸引我的是SEO/SEM运营，之前听小马宋讲过SEM的重要性，是一门比较实用的技术了。以后有机会了解一下。 运营和市场的比较因为我有广告文案的经验，所以有些运营的理念，我是能比较快的get到的。比较有趣的是作者把市场和运营做了比较，这个比较做的很好。 市场怎么说，它包括了广告，它在创造无形价值，比如说一杯星巴克咖啡，它带来的额外无形价值有什么呢：身份象征价值，体验价值，品牌简化决策价值。那放到互联网产品上呢，这种无形价值就包括，用户认知，用户转化，用户使用，用户为服务付费。为了更多的用户认知，市场它更多的是维护一个知名度，你无法去估量受众的大小，但你必须要去做。这是一种向外的工作。 而运营所做的一定需要落实到相应产品数据上，他非常有针对性。它是根据产品需要，比如说我要拉新，那就围绕着拉新这件事进行运营。 运营是数据驱动的，精细化，流程化还拿微信公众号拉新做例子，定一个数据目标。把拉新这件事情拆分开来，可以从粉丝自然增长，高质量内容，渠道转载人数，主题连载，用户传播，课程拉新，大号互推，H5传播，渠道外推，这几个维度去综合考虑。比如说我改进现有的哪几个环节，根据历史数据估量转化率，估量数据会得到多大的改进，形成一个整体的大概方案，最后去执行。 整个环节都是数据驱动的，将可能影响指标的维度罗列出来，再通过数据分析去观察度量，估量转化率，制定方案，实施，到最后再次检查数据，调整方向。 大概的流程图就是这样吧： 还没结束这书看到今天还有40%的样子，后面是关于不同运营职责所要去关注的点，偏方法的部分。等我看完了会再写一篇总结。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链项目分析 二]]></title>
    <url>%2F2018%2F07%2F08%2F%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[小组讨论以后，方案pass掉。 是使用场景局限 是不能体现出区块链的不可替代性 现阶段的方案的感觉是，现有的，有第三方介入劳务纠纷，劳资分配的方法是能解决问题的，但并没有体现区块链的不可替代性。 既然主题是区块链，所以应该是做个围绕着区块链特性为主的某个应用。而不是说在智能合约上面加外包或者社区的外套，让他看起来完善，但实际上，创新性不足。 这应该是一个，兼顾创新，实用和完整性的一个作品。 哎。。所以准备回过头看区块链的知识了，然后去想可能的应用场景。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>区块链项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[足球赔率这件事]]></title>
    <url>%2F2018%2F07%2F05%2F%E8%B6%B3%E7%90%83%E8%B5%94%E7%8E%87%E8%BF%99%E4%BB%B6%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[起因世界杯开赛的时候，我们宿舍三个不懂球的就像我这一个懂球的咨询，这球怎么买。其实有时候这种世界性的比赛挺有意思的，群众对一项运动的关注程度会一下子就上去，然后过一个月，不怎么看球的可能印象里就剩下梅西，c罗那几个出现频次比较高的名字了；对于哪个队有哪些新的妖人出来，谁谁退役了可能都记不清楚。 一个月后，这比赛对于我室友来说就当没发生过一样了，这比赛的意义在哪里呢？应该是个转化率的问题，还是会一部分概率的人从这一届开始喜欢上足球，开始关心某个球星或者某个国家队的，那20个观看了比赛的人有1个人对足球有了第一次心动，基数这么大，那这个受触动的群体就会变得贼大的。然后这个足球市场，或者说这项运动就会朝着一个健康的方向发展了。 然后我每天吃晚饭的时候像模像样跟他们分析队伍实力，一顿给我室友忽悠，最后他们每人都小赚10块，20块的，我亏了40样子。别问我怎么下注的，我买了那天巴西和德国的小组赛谢谢。。。 说真的真金白银的赌球算是群众对某项体育运动关注度害大于弊的行为。因为更多人胜负心理爆棚，观球体验就很差，会忽视足球本身的乐趣。但在我一个杠精室友说了多次可能博彩公司在操纵比赛赚钱，我突然开始好奇，这博彩公司是怎么赚钱的。 赔率计算我查了一些关键词的，结果感觉就是。 博彩公司事先预测投注额比例，比如说今晚乌拉圭主场踢法国，主赢2.1，客赢1.5，投注额比例是1.4，这是一个预测值。 然后买家投注，根据数据汇总，投乌拉圭的有14万，投法国的有10万。如果乌拉圭赢了，我们就有24万给乌拉圭的支持者，那为了博彩公司不亏损，赔率设置((14+10)/14)-1，乌拉圭的实际赔率就不能超过0.7。博彩公司可能会为了利润，调整赔率到0.65样子，而这0.05的值，就是博彩公司的利润所在，就是所谓的博彩公司的佣金。但调整后的赔率一定要尽可能地靠近0.7，因为这样才能符合群众心理预期，让更多的人选择下注。 比较神奇的一点就是，这个赔率计算是动态的，因为下注金额在不断变化，所以就算最开始预测的值差的多，博彩公司也可以根据实际的下注值调整。 那么博彩公司最愿意见到的情形就是两方都均匀的有人下注，这对博彩公司来说是个只赚不亏的生意。所以为了在两队实力相近的情况下，比如今晚乌拉圭踢法国的情况下，如果大多数人都投法国，博彩公司会联系旗下的报纸媒体，放出新闻，比如说乌拉圭卡瓦尼伤势好转，法国的后防线能否守住这匹禁区野兽的冲击。这样对乌拉圭的正面宣传或者法国军心不稳的负面宣传，都会影响更多人下注给乌拉圭，从而让博彩公司保证只赚不赔的情况。 赌球，彩票这些事情其实你稍微得到的信息多一点，心里算一下，你是能非常直观地发现，博彩公司是永远不会亏的，而且正规博彩公司不会想着说控制裁判，控制球员，他不需要费那么大的风险去控制那些，他只需要控制舆论就行。反而博彩公司为了规避风险，可能是最希望比赛顺着正常发展的一群人了。 那大家赌球，赌彩票，赌的是个啥呢。 话题性，日常交流有了点话题，网上流传的各种什么足球反着买，别墅靠海，这些话题本身有趣味性。 投机心理，心理学上是叫halo effect。比如说我面前这个姑娘，太漂亮了，漂亮到我忽视她和我没有共同话题，根本聊不下去。彩票，赌球都是这样子的吧，报纸上的宣传永远都是幸运儿得了多少多少钱，买彩票导致家破人亡的这些案例就很少。 就理性呗，享受足球本身，买点啤酒烧烤和朋友一起看球不好么= =。。 有趣的事情 从七麦数据上看到的，现在体育榜单是这样子的，除了看直播的，所有的足彩应用全上去了，我好奇一个月后，这些足彩app的运营会怎么整呢，有什么活动能留住用户么，甘心让排名下来吗？ 华帝的营销这波营销噱头炸裂啊。后来知乎看到一种解释，华帝已经早在活动开始前就用一部分营业额买了法国队是冠军。而那时候赔率是相当高的，所以这波华帝根本不慌吧，连风险对冲的准备都做好了。最坏的下场就是不赚不亏，不赚不亏算坏么？这短时间内的品牌爆炸推广效应所带来的经济效益，是不可估量的好么。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[区块链项目分析 一]]></title>
    <url>%2F2018%2F07%2F03%2F%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[第一个全国性的比赛 —— 高校区块链大赛前些日子写简历蛮头疼的一点是我作为一个产品负责人的经验有点少，我总不至于把在校期间和老师做外包的经历写上去吧。简历上大段的关于广告的，运营的，少点真正的属于产品的。然后挺巧的是，郭子那边看到一个比赛，拉我参加，果断答应了啊。 第三届互联网金融应用创新大赛，主区块链方向的，简称高校区块链大赛。hummm，因为郭子读研导师搞的是区块链方向，然后他平常老发我区块链的文章叫我分析，所以我对区块链的概念啊还有目前的技术的运用什么的都不陌生。这次想做的项目是之前他跟我聊天时我们想出来的。 当时创意的产生流程是这样的：区块链的本质是分布式数据库，目前使用最多的领域是啥呢？智能合约，那哪些领域会涉及到合约呢。当时我们想了一堆金融领域的，太大了，就不够贴近平常人的一般生活。后来有一天吐槽我和几个朋友接的外包单的不靠谱，我们意识到了，外包网站其实是一块挺适合区块链的领域，合约的制定是一种比购物更加正式的应用场景，而区块链的性质所引导出来的安全性，能让这个环节更加可靠。 但真的放比赛的时候，你是不能介绍这是一个将区块链应用在外包网站的操作吧。因为外包在程序员的大圈子里，有一种为了一时利益而放弃时间去学习的意味。所以我就想了一下，有了一个更大的更好看的外壳。 这是一个集外包，项目中成长，社区，开源项目招新，企业招聘，人工智能等多个关键词的垂直程序员社区。 四人的分工情况是：郭子负责区块链；他学姐负责人工智能算法；我和另外一个朋友负责前后端编程；我和郭子负责产品设计，因为他现在要发一篇水论文所以现在没空，所以我先想起来，这才有了下文。 需求需求在哪里对C端用户而言 编程学习者想验证自己在实际项目中能做到多好，可是组建不了合适的团体去接单 已经工作的程序员想要加入开源社区，为喜欢的项目做维护或者协同开发，可找不到正确的入口 对B端用户而言 小型开源社区找不到合适的方法去为项目招揽新鲜血液 小型公司的外包项目找不到合适的团队 如何解决需求对C端用户编程学习者注册我们的网站，填补信息，尤其是你的Github，我们会用人工智能根据你Github上的项目经验，star数，commits频率，以不同的比重给你估算一个能力分。 对想要找外包的用户，当有项目出现时，我们会根据B端所给出的关键词，能力需要，智能地组建团队。能力符合的用户会收到项目提醒，可以选择接受或者不接受。团队一旦组建完成，区块链开始起作用，智能合约产生。 对想要参加开源项目的用户，当有开源项目团队进驻网站时，我们会用人工智能匹配你的能力值，喜好和开源团队的需要，如果关联性够大，系统会及时提醒你，询问你是否想加入，一旦加入成功，智能合约生成。 对B端用户开源社区或者是公司进驻，填写基本信息，项目涉及的领域，开源社区在Github上的影响力，公司的信誉等等。 开源社区想招收新用户，人工智能匹配可能合适的有意向的用户，建立联系，进行双向选择，成功的话，智能合约生成。 公司发布项目，给定项目关键词，报酬等信息，人工智能匹配潜在的可能用户群，逐一询问意向，双向选择成功后，智能合约产生。 明天继续写到这我已经花了一晚上的时间去在纸上写写画画好多可能的情形了。。明天等实习电话的间隙再继续写需求分级，流程图之类的吧。。先睡了。。。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>区块链项目</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[把自己当作一个产品]]></title>
    <url>%2F2018%2F07%2F02%2F%E6%8A%8A%E8%87%AA%E5%B7%B1%E5%BD%93%E4%BD%9C%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%2F</url>
    <content type="text"><![CDATA[昨天那篇是和几个室友喝完酒后写的，大晚上的脑子有点糊涂，扒几个字扒到大半夜，有不妥的地方，但不想改了，难得醉呼呼地还写那么多，有纪念价值。 大三结束，几个去研发岗实习，几个留校考研，昨晚在他们觥筹交错枪林弹雨，我对烤鱼频频出击。间隙的时候我在想一个问题，我拿什么去跟应届大学生拼。 今天坐车回家路上就想这些，下面是我的思考吧。 年龄是个问题我的劣势太明显，年龄问题。24岁的应届生，在互联网这种拼年龄的行业，我这种在简历轮就很难过吧。之前听简历课程老师就说过，简历的最终目的就是拿到面试。我有想过把我之前那段经历给隐藏掉，就写成一个普通的应届生。但我知道这做法逃不掉，这东西洗不白的，终归会现出来的，所以我干脆暴露出来，写在最前面，能扛过前1分钟的审阅，避免了年龄歧视之类的，我就赢了一半了吧。 我的优势呢？ 产品是自我实现的必经之路从简历上能看出来的是，社会经历丰富吧。gap的那8个月我想了一下我之前走过的留学道路，更多的都是父母的安排，或者是老师的期望，于是我躺在床上修养的时候，我是真的非常认真地审视了自己的优势和劣势。我能写，所以我去尝试了传统广告；我嫌互联网潮流下的传统广告繁杂流程多，产出慢，传播速度慢，我求职互联网广告公司；在帮多个品牌写文案，策划campaign的时候，我再次扣问自己的内心，我心里渴望的是什么，我不想三心二意，我想有个自己的产品；所以我回到学校去学编程；在校内课设和竞赛里，我意识到了我个人力量的薄弱，团队力量的强大，我意识到了我喜欢去设计产品功能，在满足课题需求之外，我想要去了解实际生活中产品需要去实现的额外功能点。直到今天，我想投产品实习生的工作。这条路是我走的最明明白白的一条路，为自己走的一条路。所以在面试官问我为什么选择产品这份工作的时候，我能有更大地热忱去阐述我的选择。 更加自发主动的学习能力还有呢？学习能力。我广告中期犯的最大的错就是我不看书了，对于一些传媒的知识，我浅尝辄止，我都不去学习新的东西了。我误以为微博微信上传播的信息是足够应付我的求知欲的。这样的浮躁在我再次回到校园后逐渐消失了，我开始意识到我自身的局限性，在我读了越来越多的书后，这种感觉越发明显。大二我躁郁，我吃药看书思考自愈。看哲学，看心理学，直到今天，想要看的书单加上了社会学，博弈策略，我是真的意识到学习的重要性并且在坚持不断学习。这情况其实挺常见的，是挺多人走上工作岗位后，被繁重的工作重压下，会不自觉地丧失这种学习能力。还好的是，因为之前的经历，我不会再走原来走过的老路。 Connecting the dots最后呢，经验。这些年所涉及的领域多，给了我一种更加全面的观察能力。我还是会去关注好的营销活动，我走在地铁站还是会打量广告，我还是会对好的创意感兴趣，并想着去模拟出创意产生背后的考量；我关注新的技术，我在意是否对问题有更好的解决方案；我关注常用app的更新背后的功能整合，我关注新的app能否满足用户需求；我对每一次朋友圈刷屏的产品运营活动都充满好奇，切入点，规模，受众。这种多面的观察是我这几年经历之后所学习到的。以及，我非常确定在未来的某个时刻，这些所观察到的东西，这种长期的积累，能培养出一种更加全面的思维模式，最终势必会给我的职业带来益处。 我到今天为止，通达了许多，我不否认我的过去，我之前所走过的路也没有浪费，我更多地是觉得，我把我后面会遇到的问题，提前碰到并解决了。 年龄是问题吗？我并没这么觉得。不懂看到这篇的面试官你会怎么觉得呢？]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扇贝面试经验总结]]></title>
    <url>%2F2018%2F07%2F01%2F%E6%89%87%E8%B4%9D%E6%8A%95%E9%80%92%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[这篇是我去扇贝面试的总结。讲真，一波三折。面试发挥不错，hr聊得也开心，结果3天后反馈人数招满。。不过就算是这样，还是有不少可以去总结的地方的。 面试上周一去的面试，整体来说回答的还算好，唯二的卡顿在于： 如何优化扇贝每日一句 微信朋友圈信息裂变 回来以后想了想。。我把每日一句理解成一个导流小程序。初衷是为了扩大外界对扇贝品牌的认知，拉动用户参与翻译挑战，鼓励用户分享到朋友圈从而将潜在用户导流到扇贝生态里面。 那对于小程序本身的话，分享没体现出来，参与感没体现出来。现在就是在一句话下面去发布你的翻译内容，然后点赞，没了，交互就这两个。分享按钮只能分享给好友，并不能分享到朋友圈。 优化的方法，重做分享功能吧，用户发表自己的翻译内容之后，还可以额外选择制作一张精美的图片，上面有题目，下面有自己的翻译，这张卡片能分享给好友也能分享到朋友圈。这样就能把分享这个范围扩大了。促使用户进行分享的源动力都是用户爱表现，你得给用户表现的机会。 app内的优化的话，我想的是，加上一个奖励制度，徽章或者是头像框。 一天，一周，一月中获得赞数最多的用户可以得到铜，银，金的徽章/头像框 一个月参与10次，15次，20次 可以 获得参与徽章/头像框有徽章的用户在社区评论的时候就会有特殊的边框效果，或者有其他的与众不同的点。 这个偏游戏化的方法，说起来是我打王者荣耀意识到的。但我感觉针对那种有社区性质的，这方法一方面能让不知道产品的人知道这个产品，甚至想要尝试产品，另一方面让老用户有新的地盘可以扩张自己的影响力。我感觉这办法挺好的。。。 我现在有点忘了第二个题目的原话了，好像讲的是产品在朋友圈的信息裂变方式。我所理解的信息裂变就是用户受了某方面的触动进行自发地朋友圈分享行为，而这样的分享会将产品传播给不了解我产品的人，通俗点说就是忠实用户帮你打了“免费”广告。大致的种类是下面几种吧。 广告片比较传统的模式，最通常的方式就是场景式吧。将产品放到具体的使用场景里面，用了我的产品会有怎么样的效果，放大产品特点或者卖点之类的。 打卡行为背后的行为动机还是爱现；典型的例子有英语流利说，keep等这种打卡式的裂变方式，讲真，我感觉有点叶茂中式传播的影子。某个时段的重复刷屏，就是在进行记忆加深。然后一张有传播价值的打卡图片会有一些吸引人的点，比如流利说的的学习信息；比如keep的详细锻炼，跑步信息。我这个年龄段，或者说一般用户行为是符合流利说和keep所界定的潜在用户的。而我见到这种卡片是会有好奇心去查看一下，然后下载app去尝试的。 小的交互campaign背后的行为动机是让用户给自己定标签；近期的典型例子是网易云音乐的刷脸生成12位图大多数人都是喜欢给自己定标签的，星座，血型性格学，各种各样的人格测试。究其原因，我想是辅助用户了解自己，在用户给自己贴了标签以后，用户就会有一种归属感，我是哪一类的人。而产品给用户打的标签，就有点转嫁这种归属感。我们的产品懂你。结果展示加点诱导元素，就是一个挺靠谱的引流campaign了。 团购模式有点类似于拼多多的砍价模式。不管是电商还是服务商，通过分享然后经过多少人的砍价，用户就能得到多少的实惠。但要把握尺度，年初网易的课程被封就是典型例子。微信只允许两级分销，还禁止诱导分享。 这是我后来回来自己总结出来的四个信息裂变方式，金额费用高低不等，不过相对来说并没有绝对的最好的裂变方式，只有最适合产品本身的裂变方式吧。 其他的面试问题我都回答的不错，ceo和hr都对我表现出了较高的期待，实习工资150一天什么的。 面试结果周四ceo加了我微信告知我人员已满。 我没预料到这个情况，我周三美团的面试都没有去，因为我周一面的太顺了，我周末有考试和课设答辩，所以我想省时间看书做项目，讲真那天ceo跟我说这事，我人都是懵的。 讲真我能接受因为我能力不够而拒掉我，我实在是不接受等了3天告诉我人满了。 不过还好的是考完以后自己调整过来了。从这次面试我得到的教训是什么呢？offer没来的情况下，口头承诺都是不可信的。公司和员工之间应该是一种双向选择的关系，我有点太被动了，后手都没有。这道理消化的过程实在是有点痛苦，但现实是很多情况下都是这么多难的。 总结是一次比较成功的面试，前面阶段的产品学习是有效果的，我感觉我已经开始构建那种产品思维，面试的时候的条理性，是我之前所不具有的。然后从ceo那边学来了一个挺好的化主观问题成客观问题的办法。以后可以用在以后的意见分歧中。当出现主观的意见分歧的时候，比如我觉得这个功能点没有必要，可以将功能点想要实现的目的抽离出来，客观地分析功能点在现阶段的战略地位，实现和不实现带来的结果，是否在当前阶段真的重要和紧迫。求同存异。 就这种思维方式的习得，我感觉还行了，好歹是面试经验，想我之前面试两家广告公司啊，面试微软学生俱乐部都是顺顺利利，这次也算是一次挺好的失败经验吧。 没办法，继续投了。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[后面的事情]]></title>
    <url>%2F2018%2F06%2F22%2F%E5%90%8E%E9%9D%A2%E7%9A%84%E4%BA%8B%E6%83%85%2F</url>
    <content type="text"><![CDATA[这次的简历项目总结今天终于把准备的挺久的简历和简历项目投递出去了。 我现在想想我这次的简历，准备的还行吗？ 刚照着任职要求再次匹对了一次。 逻辑能力，我真的还行，毕竟是写代码的，3，4月份爬了两本本哲学的书，最近睡前看的书是关于博弈策略的。再加上我平常喜欢写文章，写之前都喜欢用大纲软件先把每一部分的要点列出来再写，我不是那种思维混乱的人。 学习能力，我也不错，写代码的人，自学能力不会差，API爬到今天了都。可能有我不知道答案，但我能用我搜集资料的能力，在短时间内找到具有说服力的答案。 基础的设计动手能力，哎，因为不会Axure，所以在5月份恶补了一下，已经不能说是我的弱势了吧。 就真的感觉我还行。投了扇贝，美团点评和阅文集团，希望有好的反馈吧。 接下来的事情先把大项目写掉吧，期末考考掉，等等公司那边的反馈。如果有好的机会，那就赶紧去，实践中成长是我现阶段非常需要的。如果没有啊，再积累一点产品分析，竞品分析，axure交互项目，然后再投吧。 产品学习这边 看书，把&lt;结网&gt;结束了，把&lt;运营之光&gt;看完，把&lt;社会学的邀请&gt;看完，把2本博弈论的看完。 把网易课程的数据分析，冷启动和用户增长看完，并且做笔记。这样我后面的数据分析会更加娴熟。 编程方面的 准备把爬虫捡回来，这次做产品分析的时候，ios端对app的评论反馈可以从七麦数据拿到，但是安卓市场实在是有点乱，我准备选三四个国内用户体量最大的app市场，抓取一下评分还有评论吧，这样以后工作也能用得找。 想的是学一下小程序开发，然后做一个阶段性记录成长进程的记录小程序。我懂小程序有那种打卡式的，比如WarFalcon打卡100天那样子的小程序，但我想要的是阶段性更强的那种。比如我减肥50天，我预计在10天，20天达到的效果是多少，到那一天有某种型式的提醒，给人鼓励或者某种机制的奖惩制度。我现在只是有这么一个概念，等过阵子我得好好思量一下，用户体量有多少，盈利模式，这是重复造轮子吗？因为我真的见过太多小程序倒闭了，带宽服务器的投入，单靠微薄的广告收入弥补不上。 哎，以上都是我接下来回去思量的东西吧。我也不想奶自己这次找实习的结果好坏，我心态放得挺好的。拿到了是对我之前这6个月来学习的肯定，拿不到是我能力不够。 我写这段话的时候，枕着我的键盘托，那时候有刻字服务，老板问我刻啥，我想了一会儿说刻”stay hungry stay foolish”。 今天摸着这几个单词，真是欣慰我那时的决定。是这样的，人都是要一直学习的。 前面的路还长着，stay hungry, stay foolish.![Stay hungry Stay foolish](/images/stay hungry.jpg )]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习僧产品分析]]></title>
    <url>%2F2018%2F06%2F18%2F%E5%AE%9E%E4%B9%A0%E5%83%A7%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[这是我的第二篇产品分析。感觉上应该是有进步的吧，分析的点面更全了。因为学了axure，所以做图什么的也不虚了。 就我开始想写这篇的时候，我开始去想我的目标用户是谁，是面试官，所以我想的是能尽可能地展现我的做图能力，对信息的搜索，对搜索到的资源的整合和运用，以及我的分析能力。 而其中的分析能力是啥呢？我想展示的是我的共情能力，我站在用户的视角去思考什么样的需求是用户想要的。我感觉这是我的强项，再加上我的细致，所以需求分析，或者说以后的需求挖掘可能是我比较闪光的地方。 而在需求分析之后的功能设计，导航设计，因为我一直在积累，所以我有种感觉，我正在逐渐把握成为一个产品经理的要点。 因为尝试了很久都不能在hexo里面较好地呈现我的需求分析，所以我保存到百度网盘去了。 实习僧产品分析 等空下来了会发到人人都是产品经理那里，希望得到更多的意见和建议了。 然后应该会在较短的时间里和简历一起投递出去吧。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从网易产品经理微课程中我学到了什么？（二）]]></title>
    <url>%2F2018%2F06%2F14%2F%E8%AF%BE%E7%A8%8B%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[这篇主讲的是产品设计的总结。 上完产品设计这一章的课，我比较直观的感受就是，我对产品设计这个标准化流程有了较深刻的了解，当然在现实生产中，也许会更精简，或者迭代速度更加快。毕竟流程是死的，人是活的，但不管怎么说，产品经理都该对这个流程有自己的理解。 在确定了用户需求后，是针对需求所做的功能设计。这一步骤我的理解就像是锦囊，面对不同的需求你见招拆招。 而后是流程设计，流程设计的要点就是模拟用户的使用途径。你希望用户怎样地去使用你所提供的锦囊去达到最终的目的。 而架构设计，是将功能相近的锦囊集合起来，打组合拳。 最后是框架设计，我现在再去反思我在广告时期所凭空架构的发界等app，那样的框架设计是很有问题。一个好的导航能让用户更自然地在想要的地方实现功能，并不会造成使用中的卡顿。 我所列在上面的就是全部的导航设计么？肯定不是，新的框架设计一直在路上，今日头条就是一个很好的例子，那样的次tab式跳转方式，让更大的信息量在页面中得以体现。在如今信息量与日俱增的时代，没有最好的导航设计，只有相对最适合app的导航设计。 而这种新鲜感，让我觉得产品经理是那种让人永远不会腻的工作。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从网易产品经理微课程中我学到了什么？（一）]]></title>
    <url>%2F2018%2F06%2F10%2F%E7%BD%91%E6%98%93%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E5%BE%AE%E8%AF%BE%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[那天总结完投递扇贝实习失败的经验教训以后，开始在网上找课程，然后正好问到有个学长买了网易产品经理微课程Orz，立马和他套近乎，学长人很好，分享给了我账号，所以这段时间就是系统性学习了这个课程，并且在一步一步跟着小楼的axure rp 8实战手册慢慢地做。 以下是我所做的课程笔记。 关于需求这边，我需要首先思考需求的诞生原因，针对的目标用户，需求的实现能给用户带来些什么，能给公司带来些什么。 毕竟我也曾理想化地觉得一个好的产品为了用户的使用体验应该抛头颅撒热血的，然后随着我朋友的初创公司的倒闭，我终于意识到一个好的商业模式对于产品的健康来说是非常重要的。 其实这边和前阿里巴巴ceo卫哲的3+1思考法有点像。 3 为什么做这个产品？目标用户是谁？ 有多少人需要这样的需求？紧迫么？ 没有这个产品的时候，用户是怎么做的？用户痛点在哪里？ 1 解决之后会带来什么样的效果？可观察到的数据？可能的收益及其他？ 因为产品设计所占的内容更多，我准备明天整理出来。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么想转产品了]]></title>
    <url>%2F2018%2F05%2F29%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E6%83%B3%E8%BD%AC%E4%BA%A7%E5%93%81%E4%BA%86%2F</url>
    <content type="text"><![CDATA[到今天为止，我接触产品6月有余。一半自学，看书；一半报网上的课程，折腾。以为懂了很多，但还没开始付诸于实际的公司操作，所以也说不上懂，近日里会重新开始投简历。朋友有问过我为什么代码写得好好的，想转产品了？我打趣说你去看看我们院有几个教授不是地中海的，或者少年白了头。说完了朋友和我哈哈大笑。但我心里是一直在质问自己的，你是为什么突然想转产品了。今天5月29，正好是15，据说月圆之夜冥想事半功倍，所以我决定好好挖挖自己内心，得想出个所以然来。 我想到的是我高中那会儿ipod touch逐渐流行，不带电话和短信功能，正好钻了学校不允许带手机的空子，可是能听歌看视频打游戏下app。家里起初没给我买，多半是朋友借我玩玩。那应该是我最开始接触app，对app产生概念，并对app的好坏开始建立一种内心标准的时候。我开始混迹那时候的威锋社区，看大家关于功能相近app的讨论和评价。那是我第一次知道ui，交互设计这些新鲜名词的地方。等我看个七七八八，我便开始现学现卖地给我同学指点迷津，告诉他们，倒计时产品，日历的，就得认准clover.ly，交互简洁大方，看着都舒服；文件管理的，得用readdle的documents，不仅支持多种文件格式，还能把动漫藏在保险箱里面躲过爸妈的搜查。 等我有了自己的智能手机，最疯狂的时候到了，我开始下载尝试不同种类的app，并频繁地对同类别app进行比较；我开始在应用商店留言我的使用评价；我更丧心病狂地通过“联系我们”去联系开发者，提出我的建议和看法。这些建议多半石沉大海，少部分的回复或敷衍的或真诚的，只要是有了回复都会让我开心很久。 后来出国读书，买了MacBook Air，又开始找寻os x平台上，那些最“好用”的app。后来学业紧，消停了一阵子，那一年绝大多数手机app都开始使用侧边栏抽屉式设计，看多了难以避免的会出现视觉疲劳，直到facebook paper的出现。虽然今天看来那时候Facebook paper的诸多设计是不合理的，但不可否认那时候他上翻下翻的交互模式是非常具有探索意义的。这让后来出现的yahoo news digest一流的诸多app更加具有设计感。ui和交互设计迎来了它的春天。 后来出了事故，回国修养。gap期间进入广告公司实习，接触了三个app的案子，帮他们做早起的ui设计，帮他们做后期的宣传和活动，扩大影响力，然后看着他们起高楼，又看着楼塌了。我开始有了别样的感触，app并不仅仅是ui和交互，他有更深层的东西，内容才是app真正的核心。 后来重新开始读计算机专业，进软件工程，开始写代码，做项目，跟着老师做工程。有一天深夜我室友都睡了，我还在改项目的实现，改bug。我看到手机推送的消息说clover.ly 的倒计时终于支持android版本了，我下载下来看，还是原来的配方，还是原来的味道。clover.ly一直没变，从2011年创办至今，一直都没变。我呢。 我不是一个非常喜欢研究尖端技术的人，多半是自觉，我比起项目组里的大佬，我还是差点那种钻研精神。我思维更加发散，我更享受项目之初的规划和设计，我更擅长需求划分和决策，我会在脑子里模拟各种各样的操作样式，并选出最适合的那个，我知道试错，也能承担责任及时止损。 想到这我是有点明白我为啥想转产品了。我对app感兴趣，我对任何一种呈现给用户的方式，载体感兴趣。我学软工想的是我能做出来的东西能满足用户需求，能给用户带来价值。但大的项目，工程，绝对不是一个人的事情，是一个团队通力协作的成果。而随着人的成长，日后工作中的团队的分工会更加细化，而我希望我能够利用好我的长处和思维优势，去给团队更大的助力，能对项目的开展和进行有合理的把控，能为我的队友提供一种精神上的支撑，能做好和外界和上级的承接工作。 这些我想要去做到的，实现的目标，其实是挺符合我看的书中所描述的产品经理的职能的。原来我这么多年来所经历的，所积累的，都是一种经验的积累，我其实是挺适合产品这个行当的。适合之外呢，我想要去做产品经理，我想要成为一名优秀的产品经理，给用户带来价值，给团队带来价值，给公司带来价值，从而实现我的价值。这么一番联想之后，让我对明天，后天，大后天的学习目标增添了不少动力，让我对日后的产品路途更加期待。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[what makes a decent 烧腊店?]]></title>
    <url>%2F2018%2F05%2F19%2F%E7%83%A7%E8%85%8A%E5%BA%97%2F</url>
    <content type="text"><![CDATA[排雷周四学校旁边新开了一家烧腊店，好不容易拉了个人去排雷，还真碰上了一颗大地雷。可怜我老铁同志第一次吃烧腊就是这种体验，我感觉我有罪，依他个性，日后会不会再次尝试烧腊又是一个问题，我更加罪孽深重了。 地段不是问题，旁边居民区加学校的。消费能力应该也不是问题，想我去年动过在外租房子的念头，中介说这附近房子都挺贵，毕竟市中心，离新街口就6站地铁，当时我演技精湛，很好地藏住了我的惊愕。我以为问题出在格局和定位上面。我用axure做了个图。 门朝东，人都是视觉动物，进门都是被挂在玻璃墙上的烧鹅烧鸡引进来的。所以视线都在烧腊这面墙上以及头顶的展示板上，我走到头了发现找不到点单的地方，老板叫我我才回头看到门左边是点单的地方。这当中的视觉感觉很奇怪，我更倾向于，点单的地方就得在烧腊区的旁边，这样子客人是能看着烧腊决定自己吃什么的，那是一种想要吃东西的冲动转化为消费欲望。我一开始以为就是我遇到这样的问题，结果我吃的时候一直看着门口，意识到更多的人和我一样，被老板引到了点单的地方，看着头顶的价格板进行了第二次选择。去的时候不是高峰期，等吃完了用餐高峰了，点单秩序全无，门口积压状况严重，如果不凑巧再碰上个选择困难症能让人急死。 点完单以后去座位了要拿着号码牌等，等到了拿着号码牌去取餐区去取。这背后的原因是这么大一个店，只有一个处理烧腊的师傅，而且他的动作有点慢。厨房秩序混乱，我能分出来那个摆盘的大哥一定是入了股的，因为他在厨房瞎指挥，但他一点干活的意愿都没有。旁边两个服务员站在旁边看着他们乱，但没有插手的地方。我感觉她们也不是保洁的那种，而是负责烧腊旁边的馄饨面条区的。 馄饨面条区的设定又体现出三个在店里的老板的野心，他们想都做一点，选择性更多。其实这还是一个定位问题，备了一套像模像样的设备在那边，可惜我从11点45到12点20都没有见到一个人来点面条什么的。而且这家店做馄饨面条完全没有任何竞争优势，旁边是一个美食广场，巷子那边还有两家资格很老的面店。你凭什么能站得住脚。 关于这家店的改进我想了很多，我感觉挺无解的。这个点餐台的设定，馄饨面区撤掉了放点餐台也是不合理的。因为桌子放那边了，到时候取餐，点餐，外卖，三拨人混在一起会把本来就显得拥挤的过道变得更加混杂。 这种自作多情的想法持续到我吃了他家的双拼饭。小菜配了一份瓜子仁萝卜干，牛头不对马嘴，窜味窜的厉害。叉烧不是赶早做的，冷冻过，肉质干。豉油鸡干，不入味。青菜铺得毫无诚意。呵呵。 好吃的烧腊店可能就是那种求生欲望吧，吃到了不好吃的会想去吃一段好吃的弥补回来。所以昨天去新街口优衣库买运动短裤的档口暴走到五台山体育馆旁边吃了这么一顿烧腊。店面是这样的 食物是这样的 店面的情况，含蓄点说是精致，粗放点说，真的小，小到挤下三张四人桌是极限，再加一桌二人桌，老板你有点过分。但就这样的店铺，不出10坪，厨房占5坪，厨师一个，店员一个，秩序井然，点单后没多久，饭就好了。充实，满当当。整体水平中间那档子。叉烧还行，烧鸡有点咸，不怎么需要那个酱，烧鹅可以，配梅子酱很舒服。梅子酱我问了店员，自己做的，真的，靠这酱我能干一碗饭。整体装修格调啊，味道啊，都在线，都比较符合一个好的烧腊店形象。 what makes a good 烧腊店?我心目中好的烧腊店可能受新加坡了凡香港油鸡饭面还有之前在温哥华richmond吃的一家烧腊店影响比较多。烧腊店整体感觉就得是翻台率贼高的那种，玻璃幕墙上挂着的食物，油光发亮的烧鸡，烤鸭，叉烧。顾客受不了那种打了追光的色诱，瞥一眼价格牌，师傅下刀的劲力得准确传达到顾客耳朵里，不能留他思考价格的余地，盯着烧腊就点单。等待的时间得短，不然会闹情绪，最好就是隔着玻璃看着师傅下刀，最好师傅说一句“这是你的”，或者装模作样问一句，“要哪一半”。 讲真，吃所有熟食最美好的过程就是看到你的食物被处理好，直到你手上的那一过程。这过程和小时候看到商店橱窗的礼物，直到礼物到你手上很相似。从求而不得，伸手可得，转化到最后得到这个步骤，就是人类最简单最原始的那种幸福感。店面可大可小，但效率得高，排队不能太多，人得能转起来，以及最后最最重要的，你烧腊得好吃。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[失败总结]]></title>
    <url>%2F2018%2F05%2F12%2F%E5%A4%B1%E8%B4%A5%E5%90%8E%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[蛮难受的，回复是经验不合适。 我感觉是我的简历的侧重点有点问题，好像过多描述了我之前做广告时期的经历，搞得我并不像一个产品经理，依旧是个文案。所以我的简历需要大修。 还有呢，我感觉我的产品分析太生搬硬套了，我选了模版，然后为了分析而分析，像是在app里面找点，然后再填充到模版里面。这种生硬感非常明显。 包括我觉得这篇产品分析并没有能体现我能够成为产品经理的潜质，就我没有把一些能力去体现出来。 比如需求分析，我那样的需求分析就是对着扇贝单词做的，它不再是一个纯粹的需求分析。 它应该是什么，它应该是从一个普通用户的角度，去思考，我想要一个怎样的背单词app。 下面是我新做的产品分析，这样的就好了很多。我换了工具，前面的mindnode太不专业了，我新学了xmind，做出来的图标专业性强点。 就我感觉这样的可能才是一个真正的需求分析。然后这篇里面，我也没有体现我对数据的敏感度，应该是有更多的数据分析在里面。我还是嫩了点。。。 包括我还有一个挺致命的点，我不会axure这样的原型工具。我有点怕这个，我是个色弱，之前做广告也不愿意去学ps，就我好像是在怕碰触设计这些的。 不好不好，书也看了那么多了，怎么可能一个合格的产品经理不会axure的。短期之内买书学习axure吧。越早开始越好。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为扇贝实习所做的产品分析]]></title>
    <url>%2F2018%2F05%2F03%2F%E6%89%87%E8%B4%9D%E5%AE%9E%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[哎，五一没回家，留校准备简历投递的事情，很想去扇贝，因为我感觉他不够好，我也有中莫名其妙的自大认为我能让他变得很好。 以下是我的第一篇产品分析，参考的模版来自我之前看的产品面试那本书。 扇贝单词产品分析本文尝试从一个产品新人的角度，从市场前景，产品定位，竞品分析，核心竞争力，产品优化五个维度，对扇贝单词进行浅析。 1. 市场前景根据2018年4月19日，Analysys易观发布的《2018年中国互联网教育平台专题分析》可以看出，2017年中国互联网教育市场规模高达2502亿元人民币，同比增长56.3%。相比线下教育行业相比，规模有所增长，意味着更多的人开始接受互联网教育的概念，但占比依旧较低，说明线上教育依然具有很大的发展潜力。随着教育信息化2.0行动，三通两平台的搭建等诸多友好政策的实行，势必给互联网教育行业带来更积极的影响。 国家经济增长，中产阶级的数量增多，生活水平提高，家庭更多的教育投入，出国留学依旧火热，这些客观事实对于互联网语言教育市场来说，意味着更大的机遇。 2. 产品定位2.1 产品概述扇贝单词是南京贝湾教育科技有限公司推出的英语单词学习app，是扇贝语言学习生态中的拳头产品。扇贝单词使用智能启发式的学习方法，帮助用户更好地识记英语单词。 2.2 目标用户扇贝单词的目标用户是 • 想要更好地学习和提高英语学习能力广大的学生群体• 想要缓解知识焦虑的白领用户 根据艾瑞数据显示，扇贝的使用人群是以女性为主导的，12-30岁是核心用户，在几个教育大省，广东，山东和江苏有着广泛的分布。 2.3 产品需求分析2.3.1 使用场景• 在宿舍，四六级考试前期，扇贝单词能帮助学生更好地去学习和巩固单词。 • 在地铁或者等待公交的过程中，精力旺盛的年轻人需要利用这样的碎片化时间去充电以对抗外来的竞争压力，这种时候点开扇贝单词，完成今日任务，能有效地提高自己的核心竞争能力。 • 在晚餐过后，已为人父人母的用户为了激发孩子对英语学习的热情，可以和孩子一起点开扇贝单词，做好榜样作用。 2.3.2 用户需求分析 3. 竞品分析3.1 选择对象在艾瑞数据中，扇贝的排列语言总榜类第四。第二的英语趣配音是一个偏口语的app，并不是扇贝的主要竞争对手。所以我们将分析第一的百词斩和第三的开心词场，分析他们在市场中的状况。 3.2 扇贝单词的优势 扇贝拥有更全的生态系统，阅读，听力等其他app的部署，让英语学习这个环节更加完整 扇贝有着更大的用户活跃度，小组，同桌功能的推出，能加强用户之间的联系，提升留存度，带来更好的使用体验 通过艾瑞数据能发现，25-30岁的用户占比很大。这体现了更多的serious learner倾向于扇贝单词这种简洁有效的交互 4. 扇贝单词的核心竞争力4.1 扇贝的核心机制突出扇贝将新老词汇混编记忆的机制是非常科学的，像我上面所提到的，他不花哨，简单直接。和top 1，3的单词识记app相比，扇贝拥有异常坚实的25-30岁用户基础，这点侧方面说明，扇贝更加适合serious learner。而这部分人群经济状况良好，相对拥有更好的消费能力，在知识付费如此风行的现在，对新概念的接受程度也高，会更加愿意为提升自己而购买相关的服务。 4.2 扇贝拥有令人羡慕的UGC环境我在朋友的初创公司帮忙过，曾今一起为了用户增长绞尽脑汁，也为用户留存量费过心。而当我打开扇贝小组的时候，我是非常羡慕扇贝拥有这么一群非常认真的核心用户的。在不是那么合理，功能不是那么完善的小组里面，会有组长制作这么详尽的图，并加以美化，po到小组里面。这样的用户行为，在整体软件市场养刁用户口味的背景下，更加显得难能可贵。这说明扇贝小组的用户是真的喜欢这款app，稍微增加一点功能点，可以极大地增加用户黏度，以及提升有效时长。 4.2 扇贝的订购服务是成熟的我咨询了我身边一个订购扇贝四，六级备考训练营的朋友，她说扇贝单词提供的服务是用心考量过的。不像其他app将课程设计外包给其他教育机构去设计，扇贝的训练营的质量是有保障的。我作为一个前广告狗，觉得是有更好的方式去向大家介绍扇贝训练营的有效的。 5.扇贝单词的优化写这份报告之前，我有找过10个比较具有代表性的英语学习者对扇贝单词app进行使用，我站在他们后面观察他们的操作行为，看他们使用过程中遇到的问题并进行记录。以下是他们的反馈和我想到的可行性较高的解决方案。 Q: 想看今日背到的单词，和之前看到的单词，在页面中找不到。A:其实这个功能是有的，在我的 -&gt; 我的词库中。 事实上这是扇贝做的非常好的一个功能点，单词划分也清晰。但是这个功能和核心功能距离有点远，增加了用户的使用的难度，整改一下ui界面，让满足用户核心需求的功能都集合在首页面，给予用户更多的正向反馈，同时也能更好地激励用户。 Q: 不是那么的有趣A: 这是一个用百词斩的女生，相比百词斩来说，扇贝单词确实没有看图来的轻松，扇贝单词更加适合serious learner的定位。但是这并不意味着扇贝将会放弃0-24这个区间里面想着用更轻松的方式去背单词的潜在用户群体。 借鉴于我之前学习过程中接受到的还有我自己欣赏的记忆方法。 针对低年龄的用户，可以使用word puzzle的方法，鼓励拼读中用荧光笔找出正确的单词。针对更多的成熟用户，我推荐网格记忆法。在背完一天的单词以后，当用户想要复习今天所悲的单词时，网格记忆法的使用能带来更好的体验。i.e: 网格记忆法的使用： fa_u_ous 抽掉部分单词让用户去填写 Q:贝壳的作用体现在哪里？A:几个用开心词场的用户觉得扇贝的贝壳所具有的虚拟货币效益比较低，所以需要一种更好的方式去体现贝壳的价值。我有点觉得扇贝的盈利方式还是显得单一。是不是有可能赋予贝壳更多的效益，让他有能力去为用户获得更多的魅力值，或者有更加实用的实体礼品可以兑换，凸显扇贝的价值，也促使更多的用户购买和消费扇贝。 以及我最近看到扇贝单词做了一个微信小程序，单词大师，设计和概念都不错，DAU很高，但我觉得应该加入道具或者某种形式进行引流，将更多感兴趣的用户导流到扇贝单词来，从而充分利用小程序的流量价值。 6.总结总的来说，扇贝已经实现了一个非常好的英语学习闭环，扇贝单词app作为扇贝家族的拳头产品，排列语言教育榜前列。作为一个不成熟的观察者，我相信平台的力量，我相信生态的力量，而扇贝正巧有着这么一批异常忠诚的用户群体。在外部竞争越发激烈的今天，扇贝单词只要发挥自己的优势，走差异化路线，就能不断提升自己的市场占有，走得更远。 以上是我不成熟的数据调查，和个人观点，希望得到审阅者的反馈，谢谢。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么样的交互是好的交互设计？]]></title>
    <url>%2F2018%2F04%2F24%2F%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%A4%E4%BA%92%E6%98%AF%E5%A5%BD%E7%9A%84%E4%BA%A4%E4%BA%92%2F</url>
    <content type="text"><![CDATA[因为这阵子实验比较多，应该是错过了比较好的找实习时机？但我更多的还是觉得我没准备好，我还有挺多不懂。比如交互，什么样的交互设计是好的？ 我印象里特别深刻的是facebook paper的交互，并且在很长一段时间里我都认为那种花哨的繁杂交互是好的交互，直到后来看到一篇文章讲facebook paper繁杂交互手势的背后，是丧失了一部分流畅的使用体验的，你想去关注的点被遮挡，重点得不到放大。然后我才明白为什么facebook paper是一个试验品，他永远不可能替代facebook成为主流的客户端。 所以我就在这段时间里看了两本书，都不长，一本&lt;简约至上 交互设计四策略&gt;，一本&lt;移动设计&gt;。 &lt;简约至上&gt;奉行的四原则是删除，组织，隐藏和转移。作者开篇非常巧妙，从改进一个电视遥控器说起，将四个策略逐一评析。我感觉这本书更适合在app或者网站功能设计结束后，遇到功能繁杂，界面混乱时，可以去求助的书。 &lt;移动设计&gt;开篇更大，更广，所以我做了比较详细的读书笔记。 就我看完这些以后，我再去思考什么是好的移动设计。不一定是花哨的，不一定是尊崇传统的，是一种最适合产品定位，产品体验，用户习惯的好的设计。关于怎么在我以后的产品生涯里，做出带有好的交互设计的产品呢？多看，多学，多在脑子里积累吧，不是那种靠凭空就能想象出来的活，也是个经验积累的事情。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[君友老卤面]]></title>
    <url>%2F2018%2F04%2F15%2F%E5%90%9B%E5%8F%8B%E8%80%81%E5%8D%A4%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[店位置不太好找，延陵巷和淮海路口，右手边搭了脚手架，老房子整修；左手边能看到不远处新街口的高楼，旁边各式的店都有，家庭式的小餐馆主人坐在路边择菜，说不上名字的蛋糕店玻璃擦得透亮，在这种老与新的中间，我犯了迷糊。路口徘徊了会儿，直到看到挂在店里的红色的招牌，才有了底气。 鸭腿拌面加熏鱼，老板娘从玄关挡着的厨房探出头，问我吃的完么。我嘿嘿心里笑，笑店家不赚钱么。店不大，撑足了30个位置，朝西，位置不太好，外面大好的太阳，店里面还有点暗，靠墙码了不少饮料，看起来随性的很。临街有两大锅，老卤一锅，下面的另一锅，阿婆抓面下锅手速超快，我还没打量完店，面就上了桌。 分量很足，大块的熏鱼加上肥瘦把握非常好的鸭腿。熏鱼是草鱼还是青鱼做的我分不出来，我不怎么喜欢淡水鱼，嫌没味道处理不好还会有土腥味，酸菜鱼和熏鱼这种用了深度加工处理过后给鱼肉赋予全新风味的除外。大块的鱼肉，整块连皮油爆过后肉不散，味道很扎实，卤味也正好，偏甜口，又不是齁甜，配拌面很有意思。卤鸭腿是我不怎么敢在小店尝试的食物之一，因为如果是老鸭肥鸭，心糙的厨师不会把鸭腿靠身子那一侧的藏在皮下的油脂去掉，端上来看着有点难过。君友老卤面用的应该是瘦鸭，品质很好，处理也到位，看不到腿骨和肉那一侧有没处理干净的鸭毛。鸭腿调味比熏鱼还要好一点，属于8块钱的价位最让人满意的那种，卤香味甩我这20年来吃过的所有卤鸭腿几条街。 虽然是吃老卤面的地方，我进门排第三个，前两位大叔都点了拌面，我怂了，从了众。我很喜欢吃面，拌面我也常做，但我永远做不出我爸的味道，一有可能是面的干湿我把握不好，二就是调味。就像全天下都知道酱油拌面需要煸过的干葱，需要盐，需要酱油，需要一点能提升香气的料，白胡椒粉什么的，这当中的配比还是一个学问。君友这家拌面用的是干面，韧劲很足，煮面时间不会长，晾面做的很好，我猜不到阿婆是哪一步就撒了提香的料，怎么会这么均匀，还是说淋了卤汁后漏勺翻的到位，面不油，但本身就带着味，讲真，没有鸭腿和熏鱼光吃这一碗面也尽兴。添的一撮咸菜算是点睛之笔，就感觉整碗面最抢味道的是这咸菜，腌的时候应该是加了不辣的红椒去吸那种咸菜的涩味，最后咸菜才会这么爽口。 其实最后吃完了出来，打着来吃老卤面旗号来吃面的我也有点不懂怎么评价这家店。鸭腿不错，熏鱼不错，面不错，咸菜都不错，整体都还挺和谐的，另外很厉害的一点就是，他们家是24小时营业的，这意味着临街的煮面炉子一天都这么热着，你可以在任何时间段进去享受一碗品质不错的面。我看点评说，这家店开了30多年，搬了两三个地方，味道没太大变化，老食客天花乱坠地吹，无意间就会让我这样的食客抬高心理预期值。然而他们家的面给我的最大感觉就是好吃。人都是会给记忆里的味道加分的，所以并没有你所想象的那么神的味道和配方。价格也亲民，13能吃一碗扎实的拌面加一个处理的那么好的鸭腿，我要是旁边写字楼的员工，我愿意天天把这家当作工作餐的地方。 听腆着大肚子的大叔和老板娘聊谈扩张的事情，老板娘说没那个精神，这点我很欣赏。这年头大部分人都希望自己喜欢的店迅速扩张，最好家门口就有一家。但其实中餐这东西不比奶茶，咖啡这类成分控制精确到克的，或者西餐那样的，固定的菜式是可以训练出来的（个人感觉），中餐更多的还是看厨师，一个好厨子就是品质的保证，当听到某一家店东开一家西开一家的时候我还是蛮遗憾的，毕竟好厨师就那么多。 老板娘，阿婆这样的，就是我最喜欢的那种人，不必上升到工匠精神那么神圣的说法，也就是在老与新的更迭中占着一个朝西的店铺，扎扎实实地端出一碗好面的。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[局外人 和 一些哲学课]]></title>
    <url>%2F2018%2F04%2F12%2F%E7%9C%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[我前阵子几个晚上做噩梦，想点有的没的，关于生死的。然后我意识到我得去了解点哲学，就那种对自我的认知，对自我实现的认知，是我在这种惶惶不得的阶段所需要的东西。 听的课是国立台湾大学的mooc，老师挺好，和蔼里面带点犀利反问的那种。听了几天，我最大的感觉就是 我不害怕死亡了 更倾向于自然选择和因果律 但是我不极端达尔文主义 我开始意识到自己的绝大多数痛苦是对自己的错误认识 在如何认识自己的路上 我开始慢慢从别人的角度去看待我自己 不全面 但我在认识自己的优点和缺点我在和自己调解 以上的过程让我花了挺大的精力去感知别人顺带还接受了一批别人的悲喜 搞得我有点悲天悯人 但我没傻 我还能调整回来 说明我应对外界影响的能力也好了点 我开始有点佛 很好地抵消这种出世感的方式 说出来你可能不信是我喜欢吃喝 所以我有这想法我去喝无糖橙子味芬达去吃喜欢的东西 这不是广告 就是说我开始认识到自身欲望竟然是我想要前进的动力 而这样的解释让我感觉到合理并且舒服 在以上几点的大条件下我感觉我最近过得都挺舒服的 挺合理的 特指心理状态生理不太行 还在减肥哦对 顺带还解决了荷尔蒙躁动问题谈恋爱的冲动今年是压得最好的一年没瞎想和自作多情地在脑子里编遇见相识的戏码真的是省了我一堆脑子最近做的选择 做的事情都挺让我满意的 &lt;局外人&gt;是老师讲生命意义的时候提到的，我找来看了，笼统5w字，字数少但力量感还是挺强的。结尾收的好像极闹腾的交响乐最后指挥收了手声音悬而未决那状态 不讨论这书的现实意义 司法漏洞 宗教信仰之类的探讨自我实现那段我个人很喜欢 就过渡完这一阶段的哲学学习后，我就感觉我能走得踏实一点了，我好像离这个世上的离苦和欢乐能保持一种比较适中的距离了。这种距离感，或者说我的认知进化，这些都是让我非常舒服的改变了。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>闲书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emoji?]]></title>
    <url>%2F2018%2F03%2F27%2Femoji%2F</url>
    <content type="text"><![CDATA[我是今天下午跟郭子说话的时候发现的，我的表情包非常多，猫猫狗狗的一套，颜团子一套，哈拉鱼一套，自带表情300个经常得要删删减减，好腾出位置给新的表情包，然后我就想了想，稍微做了点research，有了接下来的这些。 本文的写作前提是，我们把表情包归于emoji的一个子类，为了阅读方便，全文都是表情包；大家都不会犯常识性错误，错误地使用表情包从而传达了错误的意思。大家都是表情包的高手。这篇文章大家看着应该觉得有点意思的。 emoji和表情包的产生和历史我不想花太多时间去论述，大家自己wiki。所以我们快进到表情包的运用能给我们的聊天带来的影响。 积极影响： 让聊天变得稍微有趣点 加快了聊天节奏 拓展出了一定量的话题 帮助表达语言难以形容的感情 版本3.5对于微信来说是一个有纪念意义的版本，在前面的诸多版本中，从qq那边引流过来的人基本到位，被语言对讲功能吸引过来的用户也趋于圆满。3.5版本多了两个非常鲜明的功能。1，扫一扫的出现，能生成一个漂亮的菊花二维码方便添加好友；2，自定义表情和第一个官方表情包兔斯基的加入，这两个功能的出现让微信吸收了一波被微信气质所吸引的用户。不可否认的是表情的加入丰富了日常沟通，那个兔子贱兮兮的形象我现在脑子里都有印象。在此之后所有的表情包都被赋予了有趣的特征，能给日常对话带来趣味性。很多情况下，一个合适的表情就能代替很多文字和意思，没办法，图像就是比文字有说服力，所以我们在网络上的沟通节奏是越来越快的。 随着越来越多表情的出现，我自己感觉到了对不同的说话对象，我有时候得用不同的表情包，因为被对方喜爱或者属性相近的表情包往往能带来更好的聊天效果，这不是狡猾，只是说一种类似策略的东西。再怎么效果不佳都能骗来几句，哎，你也喜欢这个？谈话者有点将你们对共同表情的喜爱而对你增点点好感，从而多出了一点话题，虽然这种话题短期看是一点营养都没有的，但是，长久的话，难说啊。这是狡猾了。 我想到第三点是因为我很爱用这只傻狗的表情，在我看来他代表多种意思。你逗我，什么鬼，呵呵，你傻以及其他的许多。所以我觉得表情能帮助表达难以形容的内心感受。 消极影响： 过多的表情包使用让聊天变得像是在戴着面具沟通，越来越难以琢磨对方的准确意思。 弱化语言表达能力 第一点的产生是伴随着在线聊天的风行而愈演愈烈的。我的直观感受是我的朋友四淡发的几个表情，我难以琢磨他的意思。就像我发给别人那个傻狗表情一样，你能猜透我的实际意思么？多半不能。表情包的广泛运用，尤其是那种夹杂着太多意思的表情，在沟通中，你想去理解，耗时耗力而且吃力不讨好，并且会是沟通效果变差，以及可能会产生不必要的误解。 第二点是我着重想提的。因为像我这样的表情包高手，越来越觉得难受的是，我不再精通于用词语表达我的内心感受，在我写东西的时候想要调取某个形容词的时候，我第一反应是某个表情包。我感觉这就是我中了毒。和所有打着方便人和人之间沟通的现代流行产物一样，表情包在弱化我们的实际交流能力，所谓网络巨婴化的潮流，就是这么慢慢侵蚀着人的。 沟通的三要素，我之前自己瞎定义的是语气，用词和眼神。如果是语音交流，语气还好判定，文字沟通中的语气是个非常需要耗费精力才能去体会得到的东西，想要去揣摩，需要很强的同理心，如果要在线聊天精准把握对方的语气，是有点不符合实际的事情；眼神是线下聊天最能把握人的点，看对方的眼睛你能知道很多东西，对方是否真诚，对方是否有意愿去和你沟通，躲闪和不屑这种负面情绪，可以被精于算计的藏于表情，但眼神是会暴露一切的；用词是文字交流中我们最后的能比较容易理解对方心思的方面了。 所以在网络交流中，怎么去正确面对表情包是每个人的事情，每个人的度都不同。对于我而言，我要更少地使用，因为我还想写点其他题材的事情。我突然有点感激我郭子这样的孜孜不倦地每次都给我发语音的小伙伴，虽然我知道他是懒，不想打字。但正是靠语音，我知道他说的很多的欠扁的话真的只是一些玩笑和开导。 我最后的感想就是下次要是身在远方的你和我谈某些事情，我就会直接打个微信电话过去了，这真的是最简单有效的方式，双方心里都有个谱，也不会浪费太多的时间。如果近点，干脆就见面了。想起来前阵子知乎看到的，跟题文有点无关，稳固关系最好的方式是什么？你猜30秒钟。。。 是面对面的沟通。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《乌合之众 群体心理学》读书笔记]]></title>
    <url>%2F2018%2F03%2F18%2F%E4%B9%8C%E5%90%88%E4%B9%8B%E4%BC%97%2F</url>
    <content type="text"><![CDATA[那天看到一个产品经理的博客推荐这本书，找过来读，挺有意思的。说起来产品的用户就是这样的一群人，也是群体，对于群体心理的把握，能更好地为产品建立优势。 像小米这样的公司，我最近怎么想怎么觉得惊奇，这公司是怎么活到现在的，你怎么做SWOT分析，你都分析不出来小米会成功。小米说我们是互联网思维，其实我觉得他们是真的把群体心理把握的非常透彻了。 以下是我的读书笔记]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[两本书]]></title>
    <url>%2F2018%2F03%2F13%2F%E4%B8%A4%E6%9C%AC%E4%B9%A6%2F</url>
    <content type="text"><![CDATA[最近凭心情同时看两本，&lt;万历十五年&gt;，&lt;乌合之众&gt;，想了想挺有意思。万历十五年讲明朝万历皇帝执政期间的事情，乌合之众讲群体心理学，研究人在群体间的行为，心理的。 万历那个年代评判事物的标准，主要靠四书五经，想法是凭着历史的鉴戒，再归结到现实，希望做到古为今用。当遇到不能用历史，不能用普世价值观去评判的时候，就会寄希望于皇帝。这是皇帝的权能，可以将不合理化为合理。 然后古代还存在的一种就是法治社会，之前看知乎看到的，荆轲刺秦，群臣在殿下慌乱而不敢上前，不是不拥戴他，是因为秦法治社会，没有亲授的谏，上去救驾是要诛三代的。这件事情看来，就是纯法治的社会，法律的健全是个问题。 群体心理学那本又说，群体为什么需要推崇一个人成为领袖，是因为个体在群体中不想或者不存在过多的思考。无秩序的群体是不能接受的，有了群体就会推崇领袖，领袖赋予群体秩序，群体回馈领袖权利。但人都是有私欲的，所以会有扩张，会有吞并和战争，群体中的个体被“蛊惑”，被许了荣华富贵，去战斗，etc，最后成为历史。 所以我们现在存活的时代，法治和伦理并存，私欲和集体利益冲突。共产主义是一种美好的设想，不存在绝对的平等，人性使然。好像一切全都是一种矛盾体。这个矛盾体拖着庞大的身子，外表丑陋，内在又有忽明忽暗的人性光辉，在时间的推动下，慢慢往前行进。我们是见证者，也是经历者，在借鉴，也会被借鉴。表达不出来，但感觉挺有趣。 人这个种群，可以是极宏大，也可以是极渺小的。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>闲书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[感情这个事情]]></title>
    <url>%2F2018%2F03%2F12%2F%E6%84%9F%E6%83%85%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85%2F</url>
    <content type="text"><![CDATA[这几天勾搭的小姐姐突然不理我了。。有点难受。可能是我没把握好距离。也可能是因为别的什么。今晚实验课的代码我写得有点快，思考了点有的没的东西，写下来，给自己做点警示吧。 我总结了一下在之前的感情中我遇到的问题，想了想就是我很容易在感情的初期迷失自己。我喜欢对方肯定因为对方某方面比我强点，于是才有了喜欢。在这情况下，我要是 为了寻找话题花费超过一小时 过多的赞同 自己主动思考时间减少 观点减少 太多依赖 对自己过去和盘托出 花超30分钟去理解，以期望达到共情。 出现以上任一情况我应该立马打住，因为这不是正确的感情。这一阶段的我趋于顺从，无限放大对方的好。你说这是爱情吗？并不是，我追求的很有可能就是我理想中的感情。那不是现实，我忽视了实际相处中可能会出现的诸多问题。这阶段的我不理性，不会做出正确的判断，忽视自我。有点像是献媚，语言举止只是为了体现我的无公害和易接近。 好么？不好。我掩盖了我的诸多问题，我也忽视了对方的诸多问题，我并没有自我。自我是什么，于是我又想了一下我作为我的几点特征。 并不聪明 只是有想法 感性55%和理性45% 喜欢抖机灵讲冷笑话 喜欢写东西并期望能感染人 有点自卑 对世界观 人生观有模糊的概念 穿衣打扮运动系 不会折腾 只求整洁 要求低 剩下的都是需求 不善口头表达 喜欢安静 胜负观念强 认识的并不完全，但如果我的行为超出了以上的，或者我的喜好为了迎合而丢失了。出现一切对我自身的negative的影响，我就应该立即停下来反省自己。这不是我想要的。 实验课就这么久，再长点我还能再写点。探讨一下关于理想的感情和现实的平衡点之类的。而什么是我理想的感情呢。相近的思维水平，能进行有益的探讨，是性格的互补，知识的补完。并不是单方面的包容或者单方面的欣赏。 说了以上这一堆颇有架势的屁话，我感觉一定程度上是自我安慰，一定程度上是自我警示。开了一本新书，认知心理学，希望看完以后能对自己有更好的认识。我突然想起来前阵子我弟跟我说的话。你不能做别人的狗，你得做自己的猪。前阵子听的逆耳，道理不假。恋爱是啥，公式现在还给不出来，题目有点大，以后再说。 以及刚才最后走回宿舍的路上用了10分钟极力去simulate一个有头有脸有家庭背景有故事有情绪有喜好的姑娘站我面前，她会不会喜欢我。分裂以后起一身鸡皮疙瘩的回复是不会。既难受又欣慰，这意味着我还不够好，这意味着我还可以更好。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
        <tag>恋爱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读有感]]></title>
    <url>%2F2018%2F03%2F10%2F%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E9%9D%A2%E8%AF%95%2F</url>
    <content type="text"><![CDATA[上次决定五月份投产品的面试，所以就开始找书。看评分这本不错，就先开始看这本了。我选这本的意图就是，先大致地了解一下，产品经理面试会考核哪些东西吧，或者说能力什么的，一边看一边用omnioutliner做摘录，慢慢地就记下这么多了。。 咋说，下次面试前一定细细看一遍这些。 以下是读书笔记]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目总结]]></title>
    <url>%2F2018%2F03%2F05%2F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[今天组里做了网站项目的总结我负责的后端，写的速度还行，用的是我不怎么熟悉的java后端，我前面python flask用得更多，那个易扩展，写起来也随性。 不过更加神奇的是什么。。是我在这次项目的过程中，我突然意识到我想去掌控某种进度，掌控这个网站的进度。 是我突然想去做个产品经理了，如果真的像我前面看的那本人人都是产品经理一样，我感觉我是可以去尝试一下的。 如果确定现在要转，那我从今天开始就开始看产品方面的书了。然后5月份的时候开始投递实习了。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[老赵馄饨面馆]]></title>
    <url>%2F2018%2F03%2F03%2F%E8%80%81%E8%B5%B5%E9%A6%84%E9%A5%A8%E9%9D%A2%E9%A6%86%2F</url>
    <content type="text"><![CDATA[这店去年六月我带我前任来过，对她来说挺新奇的，毕竟相同的距离，不，一半的距离可以到下马访那儿，君临紫金商业街那条道有更多的店，也有更多的选择。可能我怪癖，偏选这条道，短短两百米，粉红灯泡的店四五家，吃的店就三家。不过有意思的是，商业街的店倒了又换，粉红灯泡的店熄了又点起来，这三家不见得倒，生意还一直挺好。 那天我带她来，我说给你一个惊喜，到了店门口还是看到她眼底里的失望。非常简陋的环境，油腻的桌子，脏兮兮的凳子，炉灶是临着路口起的，煮着一口大面锅。又正好是中午，有附近翻修街道的工人来吃大锅饭，本来就小的店面显得更小。我们并排坐着，面前坐着的是一个半地中海的大叔吸溜面，还有他的泰迪坐在挨着他的凳子上看着他。 她点了清淡的小煮面。小煮面挺讲究的会另外开一个小锅，撒点香肠，皮肤之类的吊鲜，加青菜，圈面条进去炖煮。适合胃口淡的。 我像今天这样点了牛肉面加青菜，属于老卤面。之前不懂老卤的妙，寒假和我妈两人在家捣鼓卤牛肉算是摸了点门道。上好的老卤得用猪油熬油，加姜、蒜、大料、香叶、肉桂、花椒好几种料翻炒，混老抽生抽的滚锅，再加水熬那么一锅，讲究点的得用鸡汤，四五个小时滤了渣出那么一锅卤。存冰箱留着，得养着供着，后面卤牛肉，卤猪肉什么这些本身气味不大的，吸收各种食物的精华，这锅卤会越来越浓郁，越来越鲜香。老赵家的牛肉明显就是老卤卤出来的，老卤的牛肉不会涩，有润度，牛肉咬下去是有股内在的卤香味。面是中等粗细的面，有韧劲。配青菜活卤汁吸溜起来很带劲。 我也让她尝了牛肉面，问她怎么样，她说还不错。如果那天的天气再凉快点，一起用餐的师傅们再收敛点不敞了肚子散满头的大汗，也许这面条会得到更高的评价的。 隔了一年，我都没去吃，应该是我忙，或者其他什么原因的，就这么应付过去了，今天到这来，老板娘迎上来问我吃什么。她当然忘了我，我说牛肉面加多点的青菜。等的时候我就琢磨着写这么一篇东西。 想我写这类的分享吃的东西写得还蛮头头是道的，其实很大程度上，我也只是比常人多了那么一丢丢的味觉敏感度吧。我也不挑，也不吃环境，有时候不那么好吃的东西，我能说成是好吃的，好吃的东西我也能说成是不好吃的，全凭个人喜好，加那一刻的心情好坏的。那老赵面馆作为南京芸芸多面馆，给我留下来好的印象是因为什么呢？ 扎实的份量，淳朴的调味，这种高效的夫妻档小店，更吸引我的是他的用心。不管你是住在周围3,4w一平小区的居民还是路过的车司机，亦或是刚下班的师傅还是我这样的闲过头探索街道才找来这的学生，都坐在店里一起享用这种用心烹制不含糊的食物，本身就是一件很有趣的事情。 接下来阳光好了，天气暖了，还是得经常来来。一是为了减肥，走过来再走回去的距离当消食正好，二是它确实是我心里的一根尺子，至此之后，老卤面该是什么样子的，我心里有了谱。再大的名气，什么下次有机会去吃的君友老卤面，我都会拿来跟老赵面馆比较。我会在心里嘀咕，相比外面吹的捧的，排队七八米开外的过誉面馆，老赵馄饨面馆就在那里迎接你。 以及下次要是再有了喜欢的动了心的姑娘，我还会带她来吃。我还会特事儿逼地问她，你觉得这面怎么样。这次末了我得特矫情，特造作地添一句，“你有没有觉得这面里面有股生活的味儿”。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>美食</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爆款文案]]></title>
    <url>%2F2018%2F02%2F26%2F%E7%88%86%E6%AC%BE%E6%96%87%E6%A1%88%2F</url>
    <content type="text"><![CDATA[几天的碎片时间看完了&lt;爆款文案&gt;这本周末晚上看公号推关健民的课程下下来看了这本感觉还行 蛮有意思的不同工作的人写书就是有不同的职业爱好和风格看人月神话那就是开发者写的行文跟开发文档一样严谨看产品经理啥啥的一看就是框架搭好一点点填 跟PRD一样利害分析得当看这种营销人写的就会觉得很多观点都是对的亲和力强 你听我的 买这个没错的感觉 下面这个是读书笔记 这种文案内容偏软文性质的 很多时候只是说具有参考价值的那种因为实战的时候 甲方是zz啊他们选择的是他们愿意看的 而不是更会吸引顾客的当中的折中啊卖啊 慢慢都磨得人没了那股子灵性了但我感觉那个领我进广告门的文案师父一定看过这本没好意思问她 百分之八九十这个档口在加班因为她是那种非常理想主义的人 我想想我搞广告那大半年整个人是非常理想主义的我想现在奋斗在广告业的文案都是非常理想主义的这是我看我师傅传统广告跳新媒体跳互联网又跳回传统广告公司得出的结论那个好多文案怀着巨大的热忱 心里永不熄灭的火追求的点是什么呢 我们都相信总有一天自己的文字会精准传达出产品最精髓的部分会勾起用户/顾客最深层的购买欲望我们都相信文字的力量]]></content>
      <categories>
        <category>书</category>
      </categories>
      <tags>
        <tag>闲书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[陆犯焉识]]></title>
    <url>%2F2018%2F02%2F05%2F%E9%99%86%E7%8A%AF%E7%84%89%E8%AF%86%2F</url>
    <content type="text"><![CDATA[很棒的书严歌苓遣词造句就是有种气质不玩花的就是平实描述加精准用词稳稳当当地切换人称和角度很强的文字功力跟你刻画变革下的任务跟你讲跨越了20余年的等待40多年后的浪子回头金不换 这书对我来说也不是刷新但应该是去明确一种爱情观念在现在这种偏浮躁的社会下面一份能经得起时间等待的爱情虽然稀少得像沙漠里的钻石但是还是理论存在的并值得发掘的 现在人都太现实车子 房子 票子的但我是打心眼里羡慕这种纯爱会有点接近偏执和过于理想化但又有别无理取天底下第一纯粹的爱慕和倾心 结尾很难结啊很土的话不押韵的话说希望10年后 20年后 30年后 40年后还能握着ta的手喝喝茶]]></content>
      <categories>
        <category>书</category>
      </categories>
      <tags>
        <tag>闲书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人人都可以成为产品经理么？]]></title>
    <url>%2F2018%2F01%2F28%2F%E4%BA%BA%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[最早知道产品经理这个词是我高中最迷乔布斯那阵子，那时候所有的媒体都说，乔布斯重新定义了产品经理。 前阵子和郭子吐槽我上学期写的网站项目，说到初期规划网站功能的时候我最开心，后期写和另外一个妹子写实现的时候倒是没那么痛快。郭子无意中说了一句，你倒有点产品经理的架子了。就像是尘封了很久的记忆被唤醒那样子的，我突然找到了一个我可能比较感兴趣的东西。 听了郭子的介绍，第一本书就得看&lt;人人都是产品经理&gt;。一本入门书籍，我有心理准备，不至于内容多精细，但是一个很好的开始。以下是我的读书笔记。 并不是多详细，我省去了很多介绍的，沟通的部分，留下来了这些流程图。可能是我一直搞开发的原因，我已经习惯了首先掌握程序的大致流程，功能点，接着就是架构和实现的部分了。我看完这本书最后的感想好像就是没那么难，好像这事有点逻辑的人是都可以去做的。哎，所以产品经理是那种入门门槛很低的职业么？不清楚，希望接下来看的书能给我解答了。]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[六七]]></title>
    <url>%2F2018%2F01%2F16%2F%E5%85%AD%E4%B8%83%2F</url>
    <content type="text"><![CDATA[今天是我奶奶六七按乡里的习俗今天是跟奶奶最后的告别走房子 踩天梯还有些说不上名字的其实想清楚了我没必要像之前那般暴躁所有繁杂的风俗活动都是一种很好的缓冲毕竟最伤人的就是天黑了和我爷爷两个人守着大宅子叠着纸元宝发怵 前几个晚上叠的元宝今天全都用上了混着乡里的朋友来凭吊带的纸钱填进早上粘的纸房子围一圈整理好的我奶奶生前喜欢的衣物通通堆在宅子西角桃树旁边的空气上一把火带给她 江南的天气干了好久往前看是扑面的热浪往后望是家里人眼里闪烁的光火烧的真旺依稀听到后面有乡里人说你说这人啊 唉 没了 想起来前阵子刚回家我大姑问我“尚君 你说这人走了还有么 灵魂这些的”我有点愣我大姑可能自己都没意识到她在问我一个近乎是世界真理的问题“相信了就是有的”我是这么说的 我奶奶的照片去了黑纱从条案上取下来了她只是换了个地方她搬到我们心里去了]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你是永恒]]></title>
    <url>%2F2017%2F12%2F10%2F%E4%BD%A0%E6%98%AF%E6%B0%B8%E6%81%92%2F</url>
    <content type="text"><![CDATA[奶奶辞世这一周我所写的2017 Dec 6我奶奶走了 祝一切安好 谢谢您 2017 Dec 7到今天这个时候，事情好像往着好的方向发展了。 家里人更少地去表达悲伤，因为亲戚朋友，受过恩惠的，哪怕稍微带点牵连的人，都从很远的地方赶回来了。得招呼，得拾掇，说的更多的也不是生前的苦，开始说我奶奶福气好，说我奶奶走的时候家里人都围在身边，说她面容很安详，说遗照富态，想着用各种方式去表达我奶奶得到了解脱。有点安慰性质，但绝不是自我安慰，是相信我奶奶最后是快乐的。 24小时内经历了太多，非常繁杂的民俗。就烧纸这回事，街坊邻居七嘴八舌地叫我单膝跪地，双膝跪地，同情地搬了板凳，说我不尊重地直接抽走。我想过去抗争，我想叫他们全都走，我叔叔很及时地拉住我，叫我克制，叫我听他们的。移柩的时候，大号呜咽唢呐哭泣的，一群七老八十的都在掉眼泪。等戏班子来，搭起了台子，又一个个止了哭，一边摸黄纸叠纸钱，一边听扬剧，说不清是这黄纸的魔力，还是看戏看的深。再想想我奶奶那时候，也是喜欢去别家帮忙，也喜欢去别家看戏。 我之前有点想写详细一篇，说说这“荒诞的看不懂”的民俗的。 打住打住，我用荒诞这词就是错的。 个人力量终归是单薄的，就算是群体力量也是无法去和这块土地的传统和民俗去抗衡的。我之前一直遗憾我这人不会说家乡话，也没什么口音，从来没有这一刻让我感觉到，我和这块土地是真正地联系在一起的。 再加上很多事情都是我奶奶生前嘱咐我爷爷去办的，要办的体面，她喜欢的厨子，她喜欢的戏班，她喜欢的曲子，全都是她在10月的时候自己定下的，这是她最后一次尽地主之谊招呼这些朋友的，就像她生前那样。换句话说，这些都是我奶奶的明智安排，这些邻居，这些朋友，这些闹腾，都是我奶奶以及这片土地给我们的缓冲，生的人都还是要生活的。 写上面这段是最难受的。 2017 Dec 8 更多的人从更远的地方赶来，人一来，唢呐吹钹况且况且地响，家里人就得跪，裹了草的枕头包子原先鼓鼓囊囊的，到后面，里面的草被跪得稀碎。 写不好，也没心情写，戏班子在唱最后一台戏，节气大雪过后天冷的很快，人慢慢地散开，懂事的邻居乡亲再做最后的叮嘱。前面都是他们在教我们告别，现在只剩下我们自己了。 白天闹腾过后，现在冷清的很。本家的人聚一起守最后一夜，想说的话，想表达的情绪，可以再和我奶奶说说，留给我们的时间很多。 等天亮，等6点，大家再一起出发，用我弟的话，去做最后的告别。 2017 Dec 9下午送完了我奶奶生命的最后一程。回来以后收拾我自己的房间，该扔的扔。就感觉冷清，尤其是入夜以后，非常冷清，总感觉得有那么一个声音，就是少了那么一个声音。晚上给我爷爷找遥控器，我爷爷有三个月没有开电视了。我翻他的柜子，翻出来两双羊毛袜。我记得很清楚是我上次重阳节那个周末折返回去给她买的，我也给爷爷带了两双。我奶奶没有舍得开。我奶奶说以后再开。而我没有奶奶了。 现在现在的感觉我也说不清，就是间歇性的悲伤。难过的话不多说了，生命这东西是真的难说。 和爱的人在一起的时候能多抱就抱一会儿，和亲人之间也一样，没什么不好意思的。 回忆太痛苦，又不存在什么永远，最多的都是当下。]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2F2017%2F12%2F01%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[废话时间这个博客拖拖拉拉被我搞了将近一个礼拜，也是蛮醉的。Github Pages 配 Hexo，这个换熟练一点果断一点的人，2，3个小时就可以搭出来了。。 当中的时间喂给了主题的选择，一开始用的是yilia，后来越配越觉得不是自己希望的样子；辗转到NexT，折腾折腾到了现在的样子。等了36小时的解析更新，修修改改加脑子里过了几遍这个东西的定位在哪里。 这个博客的定位是记录自己的学习进度的，单纯是一个自己记录的地方，字丑。虽然做的是博客，但老觉得博客这个词真的好老，所以标题是“第一篇文章”，不是“第一篇博客”。 最近会写的东西随笔感悟之类的我还算是那种比较能逼逼的人，随笔感悟什么的，要是有，我也会放出来的。 编程相关会把平常项目遇到的事情啊，一些想法放上来，问题和解决方法之类的。 看的书其实开这个博客主要是为了记录我看的书，不管是小说还是社科还是其他的，我都想记录下来，为的是啥呢，就感觉好像今天没有白过。 这样算是走完了流程了吧。 嗯，就是这样的情况，接下来开始写吧。Stay hungry Stay foolish]]></content>
      <categories>
        <category>计划</category>
      </categories>
  </entry>
</search>
